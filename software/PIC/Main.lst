CCS PCH C Compiler, Version 5.112, 5967               08-Nov-24 02:18

               Filename:   D:\OneDrive - Kyushu Institute Of Technolgy\BIRDS-X\00_open_source_birds_X\APRS_reference\software\PIC\Main.lst

               ROM used:   10232 bytes (8%)
                           Largest free fragment is 65520
               RAM used:   1493 (42%) at main() level
                           1556 (43%) worst case
               Stack used: 5 locations (3 in main + 2 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   25D4
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.5
0005E:  GOTO   0068
00062:  BTFSC  F9E.5
00064:  GOTO   00E4
00068:  BTFSS  FA3.5
0006A:  GOTO   0074
0006E:  BTFSC  FA4.5
00070:  GOTO   0172
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FF5
000AE:  MOVFF  16,FF6
000B2:  MOVFF  17,FF7
000B6:  MOVFF  18,FF8
000BA:  MOVFF  19,FFB
000BE:  MOVF   04,W
000C0:  MOVFF  06,FE0
000C4:  MOVFF  05,FD8
000C8:  RETFIE 0
.................... //***************************************************************************************
.................... /*
....................                    
.................... 
.................... */
.................... //****************************************************************************************
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
*
001C2:  DATA 52,65
001C4:  DATA 63,65
001C6:  DATA 69,76
001C8:  DATA 65,64
001CA:  DATA 20,43
001CC:  DATA 4D,44
001CE:  DATA 20,2D
001D0:  DATA 20,3E
001D2:  DATA 3E,20
001D4:  DATA 00,00
001D6:  DATA 55,46
001D8:  DATA 20,46
001DA:  DATA 6C,61
001DC:  DATA 67,20
001DE:  DATA 3D,20
001E0:  DATA 25,58
001E2:  DATA 0A,0D
001E4:  DATA 00,00
001E6:  DATA 55,46
001E8:  DATA 20,46
001EA:  DATA 6C,61
001EC:  DATA 67,20
001EE:  DATA 3D,20
001F0:  DATA 25,58
001F2:  DATA 0A,0D
001F4:  DATA 00,00
001F6:  DATA 6B,69
001F8:  DATA 73,73
001FA:  DATA 20,63
001FC:  DATA 6F,6D
001FE:  DATA 6D,61
00200:  DATA 6E,64
00202:  DATA 20,74
00204:  DATA 6F,20
00206:  DATA 54,4E
00208:  DATA 43,0A
0020A:  DATA 0D,00
0020C:  DATA 6B,69
0020E:  DATA 73,73
00210:  DATA 0A,00
00212:  DATA 54,52
00214:  DATA 59,20
00216:  DATA 3D,20
00218:  DATA 25,58
0021A:  DATA 0A,0D
0021C:  DATA 00,00
0021E:  DATA 6D,6F
00220:  DATA 6E,69
00222:  DATA 74,6F
00224:  DATA 72,0A
00226:  DATA 00,00
00228:  DATA 54,4E
0022A:  DATA 43,20
0022C:  DATA 69,73
0022E:  DATA 20,6E
00230:  DATA 6F,77
00232:  DATA 20,69
00234:  DATA 6E,20
00236:  DATA 4D,6F
00238:  DATA 6E,69
0023A:  DATA 74,6F
0023C:  DATA 72,20
0023E:  DATA 6D,6F
00240:  DATA 64,65
00242:  DATA 0A,0D
00244:  DATA 00,00
00246:  DATA 4C,6F
00248:  DATA 63,61
0024A:  DATA 74,69
0024C:  DATA 6F,6E
0024E:  DATA 20,76
00250:  DATA 61,6C
00252:  DATA 20,3D
00254:  DATA 20,25
00256:  DATA 4C,58
00258:  DATA 0A,0D
0025A:  DATA 20,00
0025C:  DATA 54,68
0025E:  DATA 69,73
00260:  DATA 20,70
00262:  DATA 61,63
00264:  DATA 6B,65
00266:  DATA 74,20
00268:  DATA 73,74
0026A:  DATA 61,72
0026C:  DATA 74,20
0026E:  DATA 62,79
00270:  DATA 74,65
00272:  DATA 20,6C
00274:  DATA 6F,63
00276:  DATA 61,74
00278:  DATA 69,6F
0027A:  DATA 6E,20
0027C:  DATA 3D,20
0027E:  DATA 25,4C
00280:  DATA 75,0A
00282:  DATA 0D,20
00284:  DATA 00,00
00286:  DATA 52,65
00288:  DATA 63,65
0028A:  DATA 69,76
0028C:  DATA 65,64
0028E:  DATA 20,70
00290:  DATA 61,63
00292:  DATA 6B,65
00294:  DATA 74,20
00296:  DATA 44,69
00298:  DATA 67,69
0029A:  DATA 70,65
0029C:  DATA 74,65
0029E:  DATA 72,20
002A0:  DATA 6D,6F
002A2:  DATA 64,65
002A4:  DATA 20,2D
002A6:  DATA 2D,3E
002A8:  DATA 20,00
002AA:  DATA 4C,6F
002AC:  DATA 63,61
002AE:  DATA 74,69
002B0:  DATA 6F,6E
002B2:  DATA 20,76
002B4:  DATA 61,6C
002B6:  DATA 20,3D
002B8:  DATA 20,25
002BA:  DATA 4C,58
002BC:  DATA 0A,0D
002BE:  DATA 20,00
002C0:  DATA 54,68
002C2:  DATA 69,73
002C4:  DATA 20,70
002C6:  DATA 61,63
002C8:  DATA 6B,65
002CA:  DATA 74,20
002CC:  DATA 73,74
002CE:  DATA 61,72
002D0:  DATA 74,20
002D2:  DATA 62,79
002D4:  DATA 74,65
002D6:  DATA 20,6C
002D8:  DATA 6F,63
002DA:  DATA 61,74
002DC:  DATA 69,6F
002DE:  DATA 6E,20
002E0:  DATA 3D,20
002E2:  DATA 25,4C
002E4:  DATA 75,0A
002E6:  DATA 0D,20
002E8:  DATA 00,00
002EA:  DATA 52,65
002EC:  DATA 63,65
002EE:  DATA 69,76
002F0:  DATA 65,64
002F2:  DATA 20,70
002F4:  DATA 61,63
002F6:  DATA 6B,65
002F8:  DATA 74,20
002FA:  DATA 53,26
002FC:  DATA 46,20
002FE:  DATA 6D,6F
00300:  DATA 64,65
00302:  DATA 20,2D
00304:  DATA 2D,3E
00306:  DATA 20,00
00308:  DATA 44,65
0030A:  DATA 69,67
0030C:  DATA 69,70
0030E:  DATA 65,74
00310:  DATA 65,64
00312:  DATA 20,70
00314:  DATA 61,63
00316:  DATA 6B,65
00318:  DATA 74,20
0031A:  DATA 2D,2D
0031C:  DATA 3E,20
0031E:  DATA 00,00
00320:  DATA 63,6F
00322:  DATA 6E,66
00324:  DATA 69,67
00326:  DATA 0A,0D
00328:  DATA 00,00
0032A:  DATA 63,6F
0032C:  DATA 6E,66
0032E:  DATA 69,67
00330:  DATA 00,00
00332:  DATA 63,61
00334:  DATA 6C,6C
00336:  DATA 20,34
00338:  DATA 53,37
0033A:  DATA 41,43
0033C:  DATA 0A,0D
0033E:  DATA 00,00
00340:  DATA 63,61
00342:  DATA 6C,6C
00344:  DATA 20,34
00346:  DATA 53,37
00348:  DATA 41,43
0034A:  DATA 00,00
0034C:  DATA 73,73
0034E:  DATA 69,64
00350:  DATA 20,30
00352:  DATA 0A,0D
00354:  DATA 00,00
00356:  DATA 73,73
00358:  DATA 69,64
0035A:  DATA 20,30
0035C:  DATA 00,00
0035E:  DATA 74,78
00360:  DATA 64,65
00362:  DATA 6C,61
00364:  DATA 79,20
00366:  DATA 35,30
00368:  DATA 0A,0D
0036A:  DATA 00,00
0036C:  DATA 74,78
0036E:  DATA 64,65
00370:  DATA 6C,61
00372:  DATA 79,20
00374:  DATA 35,30
00376:  DATA 00,00
00378:  DATA 74,78
0037A:  DATA 74,61
0037C:  DATA 69,6C
0037E:  DATA 20,32
00380:  DATA 30,0A
00382:  DATA 0D,00
00384:  DATA 74,78
00386:  DATA 74,61
00388:  DATA 69,6C
0038A:  DATA 20,32
0038C:  DATA 30,00
0038E:  DATA 71,75
00390:  DATA 69,65
00392:  DATA 74,20
00394:  DATA 31,30
00396:  DATA 30,0A
00398:  DATA 0D,00
0039A:  DATA 71,75
0039C:  DATA 69,65
0039E:  DATA 74,20
003A0:  DATA 31,30
003A2:  DATA 30,00
003A4:  DATA 72,73
003A6:  DATA 31,62
003A8:  DATA 61,75
003AA:  DATA 64,20
003AC:  DATA 39,36
003AE:  DATA 30,30
003B0:  DATA 0A,0D
003B2:  DATA 00,00
003B4:  DATA 72,73
003B6:  DATA 31,62
003B8:  DATA 61,75
003BA:  DATA 64,20
003BC:  DATA 39,36
003BE:  DATA 30,30
003C0:  DATA 00,00
003C2:  DATA 72,73
003C4:  DATA 32,62
003C6:  DATA 61,75
003C8:  DATA 64,20
003CA:  DATA 39,36
003CC:  DATA 30,30
003CE:  DATA 0A,0D
003D0:  DATA 00,00
003D2:  DATA 72,73
003D4:  DATA 32,62
003D6:  DATA 61,75
003D8:  DATA 64,20
003DA:  DATA 39,36
003DC:  DATA 30,30
003DE:  DATA 00,00
003E0:  DATA 70,77
003E2:  DATA 6D,20
003E4:  DATA 6F,6E
003E6:  DATA 0A,0D
003E8:  DATA 00,00
003EA:  DATA 70,77
003EC:  DATA 6D,20
003EE:  DATA 6F,6E
003F0:  DATA 00,00
003F2:  DATA 64,69
003F4:  DATA 67,69
003F6:  DATA 20,30
003F8:  DATA 20,61
003FA:  DATA 6C,69
003FC:  DATA 61,73
003FE:  DATA 20,57
00400:  DATA 49,44
00402:  DATA 45,0A
00404:  DATA 0D,00
00406:  DATA 64,69
00408:  DATA 67,69
0040A:  DATA 20,30
0040C:  DATA 20,61
0040E:  DATA 6C,69
00410:  DATA 61,73
00412:  DATA 20,57
00414:  DATA 49,44
00416:  DATA 45,00
00418:  DATA 64,69
0041A:  DATA 67,69
0041C:  DATA 20,30
0041E:  DATA 20,6D
00420:  DATA 61,78
00422:  DATA 20,31
00424:  DATA 0A,0D
00426:  DATA 00,00
00428:  DATA 64,69
0042A:  DATA 67,69
0042C:  DATA 20,30
0042E:  DATA 20,6D
00430:  DATA 61,78
00432:  DATA 20,31
00434:  DATA 00,00
00436:  DATA 64,69
00438:  DATA 67,69
0043A:  DATA 20,30
0043C:  DATA 20,72
0043E:  DATA 65,70
00440:  DATA 20,30
00442:  DATA 0A,0D
00444:  DATA 00,00
00446:  DATA 64,69
00448:  DATA 67,69
0044A:  DATA 20,30
0044C:  DATA 20,72
0044E:  DATA 65,70
00450:  DATA 20,30
00452:  DATA 00,00
00454:  DATA 64,69
00456:  DATA 67,69
00458:  DATA 20,30
0045A:  DATA 20,74
0045C:  DATA 72,61
0045E:  DATA 63,20
00460:  DATA 6F,66
00462:  DATA 66,0A
00464:  DATA 0D,00
00466:  DATA 64,69
00468:  DATA 67,69
0046A:  DATA 20,30
0046C:  DATA 20,74
0046E:  DATA 72,61
00470:  DATA 63,20
00472:  DATA 6F,66
00474:  DATA 66,00
00476:  DATA 64,69
00478:  DATA 67,69
0047A:  DATA 20,64
0047C:  DATA 75,70
0047E:  DATA 65,20
00480:  DATA 35,0A
00482:  DATA 0D,00
00484:  DATA 64,69
00486:  DATA 67,69
00488:  DATA 20,64
0048A:  DATA 75,70
0048C:  DATA 65,20
0048E:  DATA 35,00
00490:  DATA 64,69
00492:  DATA 67,69
00494:  DATA 20,30
00496:  DATA 20,6F
00498:  DATA 6E,0A
0049A:  DATA 0D,00
0049C:  DATA 64,69
0049E:  DATA 67,69
004A0:  DATA 20,30
004A2:  DATA 20,6F
004A4:  DATA 6E,00
004A6:  DATA 64,69
004A8:  DATA 67,69
004AA:  DATA 20,6F
004AC:  DATA 6E,0A
004AE:  DATA 0D,00
004B0:  DATA 64,69
004B2:  DATA 67,69
004B4:  DATA 20,6F
004B6:  DATA 6E,00
004B8:  DATA 66,6C
004BA:  DATA 61,74
004BC:  DATA 20,6F
004BE:  DATA 66,66
004C0:  DATA 0A,0D
004C2:  DATA 00,00
004C4:  DATA 66,6C
004C6:  DATA 61,74
004C8:  DATA 20,6F
004CA:  DATA 66,66
004CC:  DATA 00,00
004CE:  DATA 62,65
004D0:  DATA 61,63
004D2:  DATA 6F,6E
004D4:  DATA 20,30
004D6:  DATA 20,69
004D8:  DATA 76,20
004DA:  DATA 31,0A
004DC:  DATA 0D,00
004DE:  DATA 62,65
004E0:  DATA 61,63
004E2:  DATA 6F,6E
004E4:  DATA 20,30
004E6:  DATA 20,69
004E8:  DATA 76,20
004EA:  DATA 31,00
004EC:  DATA 62,65
004EE:  DATA 61,63
004F0:  DATA 6F,6E
004F2:  DATA 20,30
004F4:  DATA 20,64
004F6:  DATA 6C,20
004F8:  DATA 31,0A
004FA:  DATA 0D,00
004FC:  DATA 62,65
004FE:  DATA 61,63
00500:  DATA 6F,6E
00502:  DATA 20,30
00504:  DATA 20,64
00506:  DATA 6C,20
00508:  DATA 31,00
0050A:  DATA 62,65
0050C:  DATA 61,63
0050E:  DATA 6F,6E
00510:  DATA 20,30
00512:  DATA 20,70
00514:  DATA 61,74
00516:  DATA 68,20
00518:  DATA 57,49
0051A:  DATA 44,45
0051C:  DATA 31,2D
0051E:  DATA 31,2C
00520:  DATA 57,49
00522:  DATA 44,45
00524:  DATA 32,2D
00526:  DATA 32,0A
00528:  DATA 0D,00
0052A:  DATA 62,65
0052C:  DATA 61,63
0052E:  DATA 6F,6E
00530:  DATA 20,30
00532:  DATA 20,70
00534:  DATA 61,74
00536:  DATA 68,20
00538:  DATA 57,49
0053A:  DATA 44,45
0053C:  DATA 31,2D
0053E:  DATA 31,2C
00540:  DATA 57,49
00542:  DATA 44,45
00544:  DATA 32,2D
00546:  DATA 32,00
00548:  DATA 62,65
0054A:  DATA 61,63
0054C:  DATA 6F,6E
0054E:  DATA 20,30
00550:  DATA 20,6F
00552:  DATA 66,66
00554:  DATA 0A,0D
00556:  DATA 00,00
00558:  DATA 62,65
0055A:  DATA 61,63
0055C:  DATA 6F,6E
0055E:  DATA 20,30
00560:  DATA 20,6F
00562:  DATA 66,66
00564:  DATA 00,00
00566:  DATA 6D,6F
00568:  DATA 6E,6B
0056A:  DATA 69,73
0056C:  DATA 73,20
0056E:  DATA 6F,6E
00570:  DATA 0A,0D
00572:  DATA 00,00
00574:  DATA 6D,6F
00576:  DATA 6E,6B
00578:  DATA 69,73
0057A:  DATA 73,20
0057C:  DATA 6F,6E
0057E:  DATA 00,00
00580:  DATA 73,61
00582:  DATA 76,65
00584:  DATA 0A,0D
00586:  DATA 00,00
00588:  DATA 73,61
0058A:  DATA 76,65
0058C:  DATA 00,00
0058E:  DATA 6D,6F
00590:  DATA 6E,69
00592:  DATA 74,6F
00594:  DATA 72,0A
00596:  DATA 0D,00
00598:  DATA 6D,6F
0059A:  DATA 6E,69
0059C:  DATA 74,6F
0059E:  DATA 72,00
005A0:  DATA 44,69
005A2:  DATA 67,69
005A4:  DATA 70,65
005A6:  DATA 61,74
005A8:  DATA 65,72
005AA:  DATA 5F,4F
005AC:  DATA 4E,20
005AE:  DATA 63,6F
005B0:  DATA 6D,6D
005B2:  DATA 61,6E
005B4:  DATA 64,0A
005B6:  DATA 0D,20
005B8:  DATA 00,00
005BA:  DATA 44,69
005BC:  DATA 67,69
005BE:  DATA 70,65
005C0:  DATA 61,74
005C2:  DATA 65,72
005C4:  DATA 5F,4F
005C6:  DATA 4E,20
005C8:  DATA 63,6F
005CA:  DATA 6D,6D
005CC:  DATA 61,6E
005CE:  DATA 64,5F
005D0:  DATA 20,45
005D2:  DATA 78,69
005D4:  DATA 63,75
005D6:  DATA 74,65
005D8:  DATA 64,0A
005DA:  DATA 0D,20
005DC:  DATA 00,00
005DE:  DATA 44,69
005E0:  DATA 67,69
005E2:  DATA 70,65
005E4:  DATA 61,74
005E6:  DATA 65,72
005E8:  DATA 5F,4F
005EA:  DATA 46,46
005EC:  DATA 20,63
005EE:  DATA 6F,6D
005F0:  DATA 6D,61
005F2:  DATA 6E,64
005F4:  DATA 5F,45
005F6:  DATA 78,69
005F8:  DATA 63,75
005FA:  DATA 74,65
005FC:  DATA 64,0A
005FE:  DATA 0D,20
00600:  DATA 00,00
00602:  DATA 53,74
00604:  DATA 6F,72
00606:  DATA 65,20
00608:  DATA 61,6E
0060A:  DATA 64,20
0060C:  DATA 66,6F
0060E:  DATA 72,77
00610:  DATA 61,72
00612:  DATA 64,20
00614:  DATA 6F,6E
00616:  DATA 20,63
00618:  DATA 6F,6D
0061A:  DATA 6D,61
0061C:  DATA 6E,64
0061E:  DATA 0A,0D
00620:  DATA 20,00
00622:  DATA 53,74
00624:  DATA 6F,72
00626:  DATA 65,20
00628:  DATA 61,6E
0062A:  DATA 64,20
0062C:  DATA 66,6F
0062E:  DATA 72,77
00630:  DATA 61,72
00632:  DATA 64,20
00634:  DATA 6F,6E
00636:  DATA 20,63
00638:  DATA 6F,6D
0063A:  DATA 6D,61
0063C:  DATA 6E,64
0063E:  DATA 5F,45
00640:  DATA 78,69
00642:  DATA 63,75
00644:  DATA 74,65
00646:  DATA 64,0A
00648:  DATA 0D,20
0064A:  DATA 00,00
0064C:  DATA 44,41
0064E:  DATA 54,41
00650:  DATA 5F,54
00652:  DATA 52,41
00654:  DATA 4E,53
00656:  DATA 46,45
00658:  DATA 52,5F
0065A:  DATA 49,4E
0065C:  DATA 5F,53
0065E:  DATA 4E,46
00660:  DATA 5F,4D
00662:  DATA 4F,44
00664:  DATA 45,0A
00666:  DATA 0D,20
00668:  DATA 00,00
0066A:  DATA 50,61
0066C:  DATA 63,6B
0066E:  DATA 65,74
00670:  DATA 20,6E
00672:  DATA 75,6D
00674:  DATA 62,65
00676:  DATA 72,20
00678:  DATA 3D,20
0067A:  DATA 25,4C
0067C:  DATA 75,0A
0067E:  DATA 0D,20
00680:  DATA 00,00
00682:  DATA 44,41
00684:  DATA 54,41
00686:  DATA 5F,54
00688:  DATA 52,41
0068A:  DATA 4E,53
0068C:  DATA 46,45
0068E:  DATA 52,5F
00690:  DATA 49,4E
00692:  DATA 5F,44
00694:  DATA 50,5F
00696:  DATA 4D,4F
00698:  DATA 44,45
0069A:  DATA 0A,0D
0069C:  DATA 20,00
0069E:  DATA 42,65
006A0:  DATA 61,63
006A2:  DATA 6F,6E
006A4:  DATA 5F,4F
006A6:  DATA 4E,20
006A8:  DATA 63,6F
006AA:  DATA 6D,6D
006AC:  DATA 61,6E
006AE:  DATA 64,0A
006B0:  DATA 0D,20
006B2:  DATA 00,00
006B4:  DATA 42,65
006B6:  DATA 61,63
006B8:  DATA 6F,6E
006BA:  DATA 5F,4F
006BC:  DATA 4E,20
006BE:  DATA 63,6F
006C0:  DATA 6D,6D
006C2:  DATA 61,6E
006C4:  DATA 64,5F
006C6:  DATA 20,45
006C8:  DATA 78,69
006CA:  DATA 63,75
006CC:  DATA 74,65
006CE:  DATA 64,0A
006D0:  DATA 0D,20
006D2:  DATA 00,00
006D4:  DATA 42,65
006D6:  DATA 61,63
006D8:  DATA 6F,6E
006DA:  DATA 5F,4F
006DC:  DATA 46,46
006DE:  DATA 20,63
006E0:  DATA 6F,6D
006E2:  DATA 6D,61
006E4:  DATA 6E,64
006E6:  DATA 0A,0D
006E8:  DATA 20,00
006EA:  DATA 42,65
006EC:  DATA 61,63
006EE:  DATA 6F,6E
006F0:  DATA 5F,4F
006F2:  DATA 46,46
006F4:  DATA 20,63
006F6:  DATA 6F,6D
006F8:  DATA 6D,61
006FA:  DATA 6E,64
006FC:  DATA 5F,20
006FE:  DATA 45,78
00700:  DATA 69,63
00702:  DATA 75,74
00704:  DATA 65,64
00706:  DATA 0A,0D
00708:  DATA 20,00
0070A:  DATA 53,65
0070C:  DATA 63,74
0070E:  DATA 6F,72
00710:  DATA 73,20
00712:  DATA 65,72
00714:  DATA 61,73
00716:  DATA 65,64
00718:  DATA 0A,0D
0071A:  DATA 20,00
0071C:  DATA 44,61
0071E:  DATA 74,61
00720:  DATA 5F,53
00722:  DATA 65,63
00724:  DATA 74,65
00726:  DATA 72,73
00728:  DATA 5F,45
0072A:  DATA 72,61
0072C:  DATA 73,65
0072E:  DATA 5F,20
00730:  DATA 45,78
00732:  DATA 69,63
00734:  DATA 75,74
00736:  DATA 65,64
00738:  DATA 0A,0D
0073A:  DATA 20,00
0073C:  DATA 63,6F
0073E:  DATA 6D,6D
00740:  DATA 61,6E
00742:  DATA 64,20
00744:  DATA 2D,2D
00746:  DATA 3E,3E
00748:  DATA 20,00
0074A:  DATA 50,49
0074C:  DATA 43,20
0074E:  DATA 42,6F
00750:  DATA 6F,74
00752:  DATA 69,6E
00754:  DATA 67,20
00756:  DATA 0A,0D
00758:  DATA 00,00
0075A:  DATA 43,4D
0075C:  DATA 44,20
0075E:  DATA 66,72
00760:  DATA 6F,6D
00762:  DATA 20,4D
00764:  DATA 69,73
00766:  DATA 73,69
00768:  DATA 6F,6E
0076A:  DATA 20,42
0076C:  DATA 4F,53
0076E:  DATA 53,20
00770:  DATA 2D,2D
00772:  DATA 3E,20
00774:  DATA 00,00
*
00A64:  TBLRD*+
00A66:  MOVF   FF5,F
00A68:  BZ    0A8A
00A6A:  MOVFF  FF6,5F5
00A6E:  MOVFF  FF7,5F6
00A72:  MOVFF  FF8,5F7
00A76:  MOVFF  FF5,601
00A7A:  RCALL  0A20
00A7C:  MOVFF  5F5,FF6
00A80:  MOVFF  5F6,FF7
00A84:  MOVFF  5F7,FF8
00A88:  BRA    0A64
00A8A:  RETURN 0
*
00BE0:  TBLRD*+
00BE2:  MOVFF  FF6,5F6
00BE6:  MOVFF  FF7,5F7
00BEA:  MOVFF  FF8,5F8
00BEE:  MOVFF  FF5,601
00BF2:  RCALL  0A20
00BF4:  MOVFF  5F6,FF6
00BF8:  MOVFF  5F7,FF7
00BFC:  MOVFF  5F8,FF8
00C00:  MOVLB  5
00C02:  DECFSZ xF5,F
00C04:  BRA    0C08
00C06:  BRA    0C0C
00C08:  MOVLB  0
00C0A:  BRA    0BE0
00C0C:  MOVLB  0
00C0E:  RETURN 0
00C10:  MOVLB  5
00C12:  BTFSC  xF7.7
00C14:  BRA    0C38
00C16:  MOVLW  0F
00C18:  MOVWF  00
00C1A:  SWAPF  xF6,W
00C1C:  ANDWF  00,F
00C1E:  MOVLW  0A
00C20:  SUBWF  00,W
00C22:  BC    0C2A
00C24:  MOVLW  30
00C26:  ADDWF  00,F
00C28:  BRA    0C2E
00C2A:  MOVF   xF7,W
00C2C:  ADDWF  00,F
00C2E:  MOVFF  00,601
00C32:  MOVLB  0
00C34:  RCALL  0A20
00C36:  MOVLB  5
00C38:  MOVLW  0F
00C3A:  ANDWF  xF6,F
00C3C:  MOVLW  0A
00C3E:  SUBWF  xF6,W
00C40:  BC    0C46
00C42:  MOVLW  30
00C44:  BRA    0C4A
00C46:  BCF    xF7.7
00C48:  MOVF   xF7,W
00C4A:  ADDWF  xF6,F
00C4C:  MOVFF  5F6,601
00C50:  MOVLB  0
00C52:  RCALL  0A20
00C54:  RETURN 0
*
00DD6:  MOVFF  FEA,5FD
00DDA:  MOVFF  FE9,5FC
00DDE:  MOVLB  5
00DE0:  BTFSS  xF6.7
00DE2:  BRA    0DF4
00DE4:  BSF    xFC.7
00DE6:  BTFSS  xFC.4
00DE8:  INCF   xFC,F
00DEA:  COMF   xF5,F
00DEC:  COMF   xF6,F
00DEE:  INCF   xF5,F
00DF0:  BTFSC  FD8.2
00DF2:  INCF   xF6,F
00DF4:  SWAPF  xF6,W
00DF6:  IORLW  F0
00DF8:  MOVWF  xF8
00DFA:  ADDWF  xF8,F
00DFC:  ADDLW  E2
00DFE:  MOVWF  xF9
00E00:  ADDLW  32
00E02:  MOVWF  xFB
00E04:  MOVF   xF6,W
00E06:  ANDLW  0F
00E08:  ADDWF  xF9,F
00E0A:  ADDWF  xF9,F
00E0C:  ADDWF  xFB,F
00E0E:  ADDLW  E9
00E10:  MOVWF  xFA
00E12:  ADDWF  xFA,F
00E14:  ADDWF  xFA,F
00E16:  SWAPF  xF5,W
00E18:  ANDLW  0F
00E1A:  ADDWF  xFA,F
00E1C:  ADDWF  xFB,F
00E1E:  RLCF   xFA,F
00E20:  RLCF   xFB,F
00E22:  COMF   xFB,F
00E24:  RLCF   xFB,F
00E26:  MOVF   xF5,W
00E28:  ANDLW  0F
00E2A:  ADDWF  xFB,F
00E2C:  RLCF   xF8,F
00E2E:  MOVLW  07
00E30:  MOVWF  xF7
00E32:  MOVLW  0A
00E34:  DECF   xFA,F
00E36:  ADDWF  xFB,F
00E38:  BNC   0E34
00E3A:  DECF   xF9,F
00E3C:  ADDWF  xFA,F
00E3E:  BNC   0E3A
00E40:  DECF   xF8,F
00E42:  ADDWF  xF9,F
00E44:  BNC   0E40
00E46:  DECF   xF7,F
00E48:  ADDWF  xF8,F
00E4A:  BNC   0E46
00E4C:  MOVLW  05
00E4E:  MOVWF  FEA
00E50:  MOVLW  F7
00E52:  MOVWF  FE9
00E54:  MOVLW  07
00E56:  ANDWF  xFC,W
00E58:  BCF    xFC.6
00E5A:  MOVF   FED,F
00E5C:  ANDWF  xFC,W
00E5E:  BNZ   0E6E
00E60:  BTFSC  xFC.4
00E62:  MOVF   FEE,F
00E64:  BTFSC  xFC.4
00E66:  BRA    0E6E
00E68:  MOVLW  20
00E6A:  MOVWF  00
00E6C:  BRA    0EB0
00E6E:  ADDWF  FE9,F
00E70:  MOVLW  00
00E72:  ADDWFC FEA,F
00E74:  MOVF   FE9,W
00E76:  SUBLW  FB
00E78:  BNZ   0E82
00E7A:  MOVF   FEA,W
00E7C:  SUBLW  05
00E7E:  BNZ   0E82
00E80:  BSF    xFC.6
00E82:  MOVF   FEF,W
00E84:  MOVWF  00
00E86:  BNZ   0E98
00E88:  BTFSC  xFC.6
00E8A:  BRA    0E98
00E8C:  BTFSC  xFC.4
00E8E:  BRA    0ECA
00E90:  BTFSC  xFC.3
00E92:  BRA    0E98
00E94:  MOVLW  20
00E96:  BRA    0EAE
00E98:  BTFSS  xFC.7
00E9A:  BRA    0EA8
00E9C:  MOVLW  2D
00E9E:  MOVWF  00
00EA0:  MOVF   FED,W
00EA2:  BCF    xFC.6
00EA4:  BCF    xFC.7
00EA6:  BRA    0EB0
00EA8:  BSF    xFC.3
00EAA:  BCF    xFC.4
00EAC:  MOVLW  30
00EAE:  ADDWF  00,F
00EB0:  MOVFF  FEA,5F6
00EB4:  MOVFF  FE9,5F5
00EB8:  MOVFF  00,601
00EBC:  MOVLB  0
00EBE:  RCALL  0A20
00EC0:  MOVFF  5F6,FEA
00EC4:  MOVFF  5F5,FE9
00EC8:  MOVLB  5
00ECA:  MOVF   FEE,W
00ECC:  BTFSS  xFC.6
00ECE:  BRA    0E74
00ED0:  MOVLB  0
00ED2:  GOTO   1152 (RETURN)
*
00F0E:  BTFSC  FD8.1
00F10:  BRA    0F1A
00F12:  MOVLW  06
00F14:  MOVWF  FEA
00F16:  MOVLW  09
00F18:  MOVWF  FE9
00F1A:  CLRF   00
00F1C:  CLRF   01
00F1E:  CLRF   02
00F20:  CLRF   03
00F22:  MOVLB  6
00F24:  CLRF   x09
00F26:  CLRF   x0A
00F28:  CLRF   x0B
00F2A:  CLRF   x0C
00F2C:  MOVF   x08,W
00F2E:  IORWF  x07,W
00F30:  IORWF  x06,W
00F32:  IORWF  x05,W
00F34:  BZ    0F8E
00F36:  MOVLW  20
00F38:  MOVWF  x0D
00F3A:  BCF    FD8.0
00F3C:  RLCF   x01,F
00F3E:  RLCF   x02,F
00F40:  RLCF   x03,F
00F42:  RLCF   x04,F
00F44:  RLCF   x09,F
00F46:  RLCF   x0A,F
00F48:  RLCF   x0B,F
00F4A:  RLCF   x0C,F
00F4C:  MOVF   x08,W
00F4E:  SUBWF  x0C,W
00F50:  BNZ   0F62
00F52:  MOVF   x07,W
00F54:  SUBWF  x0B,W
00F56:  BNZ   0F62
00F58:  MOVF   x06,W
00F5A:  SUBWF  x0A,W
00F5C:  BNZ   0F62
00F5E:  MOVF   x05,W
00F60:  SUBWF  x09,W
00F62:  BNC   0F82
00F64:  MOVF   x05,W
00F66:  SUBWF  x09,F
00F68:  MOVF   x06,W
00F6A:  BTFSS  FD8.0
00F6C:  INCFSZ x06,W
00F6E:  SUBWF  x0A,F
00F70:  MOVF   x07,W
00F72:  BTFSS  FD8.0
00F74:  INCFSZ x07,W
00F76:  SUBWF  x0B,F
00F78:  MOVF   x08,W
00F7A:  BTFSS  FD8.0
00F7C:  INCFSZ x08,W
00F7E:  SUBWF  x0C,F
00F80:  BSF    FD8.0
00F82:  RLCF   00,F
00F84:  RLCF   01,F
00F86:  RLCF   02,F
00F88:  RLCF   03,F
00F8A:  DECFSZ x0D,F
00F8C:  BRA    0F3A
00F8E:  MOVFF  609,FEF
00F92:  MOVFF  60A,FEC
00F96:  MOVFF  60B,FEC
00F9A:  MOVFF  60C,FEC
00F9E:  MOVLB  0
00FA0:  RETURN 0
00FA2:  MOVF   FE9,W
00FA4:  MOVLB  5
00FA6:  MOVWF  xF9
00FA8:  MOVLW  3B
00FAA:  MOVLB  6
00FAC:  MOVWF  x00
00FAE:  MOVLW  9A
00FB0:  MOVLB  5
00FB2:  MOVWF  xFF
00FB4:  MOVLW  CA
00FB6:  MOVWF  xFE
00FB8:  CLRF   xFD
00FBA:  MOVLW  0A
00FBC:  MOVWF  xFB
00FBE:  BSF    FD8.1
00FC0:  MOVLW  05
00FC2:  MOVWF  FEA
00FC4:  MOVLW  F5
00FC6:  MOVWF  FE9
00FC8:  MOVFF  5F8,604
00FCC:  MOVFF  5F7,603
00FD0:  MOVFF  5F6,602
00FD4:  MOVFF  5F5,601
00FD8:  MOVFF  600,608
00FDC:  MOVFF  5FF,607
00FE0:  MOVFF  5FE,606
00FE4:  MOVFF  5FD,605
00FE8:  MOVLB  0
00FEA:  RCALL  0F0E
00FEC:  MOVF   01,W
00FEE:  MOVF   00,F
00FF0:  BNZ   1018
00FF2:  MOVLB  5
00FF4:  MOVF   xFB,W
00FF6:  XORLW  01
00FF8:  BTFSS  FD8.2
00FFA:  BRA    1000
00FFC:  MOVLB  0
00FFE:  BRA    1018
01000:  MOVF   xF9,W
01002:  BZ    101C
01004:  ANDLW  0F
01006:  SUBWF  xFB,W
01008:  BZ    100C
0100A:  BC    102A
0100C:  BTFSC  xF9.7
0100E:  BRA    102A
01010:  BTFSC  xF9.6
01012:  BRA    101C
01014:  MOVLW  20
01016:  BRA    101E
01018:  MOVLB  5
0101A:  CLRF   xF9
0101C:  MOVLW  30
0101E:  ADDWF  00,F
01020:  MOVFF  00,601
01024:  MOVLB  0
01026:  RCALL  0A20
01028:  MOVLB  5
0102A:  BCF    FD8.1
0102C:  MOVFF  600,604
01030:  MOVFF  5FF,603
01034:  MOVFF  5FE,602
01038:  MOVFF  5FD,601
0103C:  MOVLB  6
0103E:  CLRF   x08
01040:  CLRF   x07
01042:  CLRF   x06
01044:  MOVLW  0A
01046:  MOVWF  x05
01048:  MOVLB  0
0104A:  RCALL  0F0E
0104C:  MOVFF  03,600
01050:  MOVFF  02,5FF
01054:  MOVFF  01,5FE
01058:  MOVFF  00,5FD
0105C:  MOVLB  5
0105E:  DECFSZ xFB,F
01060:  BRA    0FBE
01062:  MOVLB  0
01064:  RETURN 0
*
01F1A:  MOVLB  5
01F1C:  CLRF   xF4
01F1E:  CLRF   xF5
01F20:  MOVLW  01
01F22:  MOVWF  xF6
01F24:  CLRF   FDA
01F26:  CLRF   FD9
01F28:  MOVLW  05
01F2A:  MOVWF  xF9
01F2C:  MOVLW  EC
01F2E:  MOVWF  xF8
01F30:  MOVLW  05
01F32:  MOVWF  FEA
01F34:  MOVLW  F0
01F36:  MOVWF  FE9
01F38:  MOVFF  5F9,FE2
01F3C:  MOVFF  5F8,FE1
01F40:  MOVFF  5F6,5F7
01F44:  BCF    FD8.0
01F46:  MOVF   FE5,W
01F48:  MULWF  FEE
01F4A:  MOVF   FF3,W
01F4C:  ADDWFC xF4,F
01F4E:  MOVF   FF4,W
01F50:  ADDWFC xF5,F
01F52:  DECFSZ xF7,F
01F54:  BRA    1F44
01F56:  MOVFF  5F4,FDE
01F5A:  MOVFF  5F5,5F4
01F5E:  CLRF   xF5
01F60:  BTFSC  FD8.0
01F62:  INCF   xF5,F
01F64:  INCF   xF8,F
01F66:  BTFSC  FD8.2
01F68:  INCF   xF9,F
01F6A:  INCF   xF6,F
01F6C:  MOVF   xF6,W
01F6E:  SUBLW  05
01F70:  BNZ   1F30
01F72:  MOVLB  0
01F74:  RETURN 0
.................... 
.................... #list
.................... 
.................... #fuses NOWDT
.................... #use delay(internal = 16MHz)
*
0087E:  MOVLW  06
00880:  MOVWF  FEA
00882:  MOVLW  01
00884:  MOVWF  FE9
00886:  MOVF   FEF,W
00888:  BZ    08A6
0088A:  MOVLW  05
0088C:  MOVWF  01
0088E:  CLRF   00
00890:  DECFSZ 00,F
00892:  BRA    0890
00894:  DECFSZ 01,F
00896:  BRA    088E
00898:  MOVLW  2E
0089A:  MOVWF  00
0089C:  DECFSZ 00,F
0089E:  BRA    089C
008A0:  BRA    08A2
008A2:  DECFSZ FEF,F
008A4:  BRA    088A
008A6:  RETURN 0
.................... #use rs232(baud=9600, parity=N, xmit=PIN_E1,rcv=pin_E0,bits=8, stream= mboss,force_sw)
*
00A8C:  BSF    F96.0
00A8E:  BTFSC  F84.0
00A90:  BRA    0A8E
00A92:  MOVLW  08
00A94:  MOVWF  00
00A96:  MOVLB  5
00A98:  CLRF   xDE
00A9A:  BSF    00.7
00A9C:  BRA    0ABA
00A9E:  BCF    00.7
00AA0:  BRA    0ABA
00AA2:  BCF    FD8.0
00AA4:  BTFSC  F84.0
00AA6:  BSF    FD8.0
00AA8:  RRCF   xDE,F
00AAA:  BSF    00.6
00AAC:  BRA    0ABA
00AAE:  BCF    00.6
00AB0:  DECFSZ 00,F
00AB2:  BRA    0AA2
00AB4:  MOVFF  5DE,01
00AB8:  BRA    0AD2
00ABA:  MOVLW  84
00ABC:  BTFSC  00.7
00ABE:  MOVLW  24
00AC0:  MOVWF  01
00AC2:  DECFSZ 01,F
00AC4:  BRA    0AC2
00AC6:  BRA    0AC8
00AC8:  BTFSC  00.7
00ACA:  BRA    0A9E
00ACC:  BTFSC  00.6
00ACE:  BRA    0AAE
00AD0:  BRA    0AA2
00AD2:  MOVLB  0
00AD4:  RETURN 0
*
01C4E:  BCF    F96.1
01C50:  BCF    F8D.1
01C52:  MOVLW  08
01C54:  MOVWF  01
01C56:  BRA    1C58
01C58:  NOP   
01C5A:  BSF    01.7
01C5C:  BRA    1C7E
01C5E:  BCF    01.7
01C60:  MOVLB  5
01C62:  RRCF   xE5,F
01C64:  MOVLB  0
01C66:  BTFSC  FD8.0
01C68:  BSF    F8D.1
01C6A:  BTFSS  FD8.0
01C6C:  BCF    F8D.1
01C6E:  BSF    01.6
01C70:  BRA    1C7E
01C72:  BCF    01.6
01C74:  DECFSZ 01,F
01C76:  BRA    1C60
01C78:  BRA    1C7A
01C7A:  NOP   
01C7C:  BSF    F8D.1
01C7E:  MOVLW  84
01C80:  MOVWF  FE9
01C82:  DECFSZ FE9,F
01C84:  BRA    1C82
01C86:  BRA    1C88
01C88:  NOP   
01C8A:  BTFSC  01.7
01C8C:  BRA    1C5E
01C8E:  BTFSC  01.6
01C90:  BRA    1C72
01C92:  RETURN 0
.................... char UF = 0xCC;
.................... unsigned int32 NEXT_B_ADD_DP = 0x00020000;
.................... unsigned int32 NEXT_B_ADD_SF = 0x00030000;
.................... 
.................... #include <pic_settings.c>
.................... char MBOSS_TO_APRS_ARRAY[50];
.................... char APRS_TO_MBOSS_ARRAY[100];
.................... 
.................... char TNC_TO_PIC_ARRAY[500];
.................... 
.................... unsigned int8  Mode_Flag = 0x0E ;
.................... unsigned int32 SNF_LOCATION = 0x001A0000 ;
.................... unsigned int32 DGP_LOCATION = 0x001B0000 ;
.................... 
.................... 
.................... // **********************UART_1 Setting (TNC_PORT) ****************************
.................... //
.................... //
.................... //*****************************************************************************
.................... #pin_select U1TX=PIN_B2
.................... #pin_select U1RX=PIN_C7
.................... #use rs232(UART1,baud=19200, parity=N, bits=8, stream= TNC,errors)
*
000CA:  BTFSS  F9E.5
000CC:  BRA    00CA
000CE:  MOVFF  FAB,2B7
000D2:  MOVLB  2
000D4:  MOVFF  FAE,01
000D8:  BTFSS  xB7.1
000DA:  BRA    00E0
000DC:  BCF    FAB.4
000DE:  BSF    FAB.4
000E0:  MOVLB  0
000E2:  RETURN 0
*
00C56:  BTFSS  F9E.4
00C58:  BRA    0C56
00C5A:  MOVWF  FAD
00C5C:  RETURN 0
.................... 
.................... unsigned int8 UART1_Buffer[210];
.................... unsigned int8 UART1_Byte_Counter = 0;
.................... unsigned int8 UART1_Overflow = 0;
.................... unsigned int8 UART1_Read_Byte_counter = 0;
.................... unsigned int8 UART1_Temp_byte = 0;
.................... 
.................... #INT_RDA
.................... Void SERIAL_ISR1()    // MAIN PIC uart1 interupt loop
.................... {
....................    if( UART1_Byte_Counter < 200 )
*
000E4:  MOVLB  3
000E6:  MOVF   x8A,W
000E8:  SUBLW  C7
000EA:  BNC   0118
....................    {
....................       UART1_Buffer[UART1_Byte_Counter] = fgetc(TNC);// TNC PORT Data Array, Load to the UART1 Buffer Array
000EC:  CLRF   03
000EE:  MOVF   x8A,W
000F0:  ADDLW  B8
000F2:  MOVWF  FE9
000F4:  MOVLW  02
000F6:  ADDWFC 03,W
000F8:  MOVWF  FEA
000FA:  MOVFF  FEA,612
000FE:  MOVFF  FE9,611
00102:  MOVLB  0
00104:  RCALL  00CA
00106:  MOVFF  612,FEA
0010A:  MOVFF  611,FE9
0010E:  MOVFF  01,FEF
....................       UART1_Byte_Counter++;                         // finally UART1_Byte_Counter=199 value
00112:  MOVLB  3
00114:  INCF   x8A,F
....................    }
00116:  BRA    0122
....................    
....................    else UART1_Overflow = fgetc(TNC);
00118:  MOVLB  0
0011A:  RCALL  00CA
0011C:  MOVFF  01,38B
00120:  MOVLB  3
00122:  BCF    F9E.5
00124:  MOVLB  0
00126:  GOTO   0074
.................... }
.................... 
.................... unsigned int8 UART1_Available()
.................... {
....................    return UART1_Byte_Counter ;  // UART1_Byte_Counter = 199
*
01C22:  MOVLB  3
01C24:  MOVFF  38A,01
01C28:  MOVLB  0
01C2A:  GOTO   270E (RETURN)
.................... }
.................... 
.................... unsigned int8 UART1_Read()
.................... {
....................    if (UART1_Byte_Counter>0)
*
00ED6:  MOVLB  3
00ED8:  MOVF   x8A,F
00EDA:  BZ    0EFE
....................    {    
....................       UART1_Temp_byte = UART1_Buffer[UART1_Read_Byte_counter];
00EDC:  CLRF   03
00EDE:  MOVF   x8C,W
00EE0:  ADDLW  B8
00EE2:  MOVWF  FE9
00EE4:  MOVLW  02
00EE6:  ADDWFC 03,W
00EE8:  MOVWF  FEA
00EEA:  MOVFF  FEF,38D
....................       
....................       UART1_Byte_Counter--;
00EEE:  DECF   x8A,F
....................       UART1_Read_Byte_counter++;
00EF0:  INCF   x8C,F
....................       if(UART1_Byte_Counter == 0) UART1_Read_Byte_counter = 0;
00EF2:  MOVF   x8A,F
00EF4:  BNZ   0EF8
00EF6:  CLRF   x8C
....................       return UART1_Temp_byte; 
00EF8:  MOVFF  38D,01
00EFC:  BRA    0F0A
....................    }
....................    
....................    if (UART1_Byte_Counter == 0)
00EFE:  MOVF   x8A,F
00F00:  BNZ   0F0A
....................    { 
....................       UART1_Read_Byte_counter = 0;
00F02:  CLRF   x8C
....................       UART1_Temp_byte = 0x00;
00F04:  CLRF   x8D
....................       return UART1_Temp_byte; 
00F06:  MOVFF  38D,01
....................    }
00F0A:  MOVLB  0
00F0C:  RETURN 0
....................  
.................... }
.................... void UART1_flush()
.................... {
....................    while( UART1_Available() )  UART1_Read();
.................... }
.................... 
.................... // **********************UART_2 Setting (Debug_Port) **************************
.................... //
.................... //
.................... //*****************************************************************************
.................... 
.................... 
.................... unsigned int8  UART2_Buffer[500];
.................... unsigned int16 UART2_Byte_Counter = 0;
.................... unsigned int8  UART2_Overflow = 0;
.................... unsigned int8  UART2_Read_Byte_counter = 0;
.................... unsigned int8  UART2_Temp_byte = 0;
.................... 
.................... 
.................... #use rs232(baud=19200, xmit = PIN_B6, rcv = PIN_B7, parity=N,  bits=8, stream= debug, errors)
*
0012A:  BSF    F93.7
0012C:  BTFSC  F81.7
0012E:  BRA    012C
00130:  MOVLW  08
00132:  MOVWF  00
00134:  MOVLB  6
00136:  CLRF   x13
00138:  BSF    00.7
0013A:  BRA    0158
0013C:  BCF    00.7
0013E:  BRA    0158
00140:  BCF    FD8.0
00142:  BTFSC  F81.7
00144:  BSF    FD8.0
00146:  RRCF   x13,F
00148:  BSF    00.6
0014A:  BRA    0158
0014C:  BCF    00.6
0014E:  DECFSZ 00,F
00150:  BRA    0140
00152:  MOVFF  613,01
00156:  BRA    016E
00158:  MOVLW  3F
0015A:  BTFSC  00.7
0015C:  MOVLW  11
0015E:  MOVWF  01
00160:  DECFSZ 01,F
00162:  BRA    0160
00164:  BTFSC  00.7
00166:  BRA    013C
00168:  BTFSC  00.6
0016A:  BRA    014C
0016C:  BRA    0140
0016E:  MOVLB  0
00170:  RETURN 0
*
00A20:  BCF    F93.6
00A22:  BCF    F8A.6
00A24:  MOVLW  08
00A26:  MOVWF  01
00A28:  BRA    0A2A
00A2A:  NOP   
00A2C:  BSF    01.7
00A2E:  BRA    0A50
00A30:  BCF    01.7
00A32:  MOVLB  6
00A34:  RRCF   x01,F
00A36:  MOVLB  0
00A38:  BTFSC  FD8.0
00A3A:  BSF    F8A.6
00A3C:  BTFSS  FD8.0
00A3E:  BCF    F8A.6
00A40:  BSF    01.6
00A42:  BRA    0A50
00A44:  BCF    01.6
00A46:  DECFSZ 01,F
00A48:  BRA    0A32
00A4A:  BRA    0A4C
00A4C:  NOP   
00A4E:  BSF    F8A.6
00A50:  MOVLW  3F
00A52:  MOVWF  FE9
00A54:  DECFSZ FE9,F
00A56:  BRA    0A54
00A58:  NOP   
00A5A:  BTFSC  01.7
00A5C:  BRA    0A30
00A5E:  BTFSC  01.6
00A60:  BRA    0A44
00A62:  RETURN 0
.................... 
.................... #INT_RDA2
.................... Void SERIAL_ISR2()     // MAIN PIC uart2 interupt loop
.................... {
....................    if( UART2_Byte_Counter < 500 )
*
00172:  MOVLB  5
00174:  MOVF   x83,W
00176:  SUBLW  01
00178:  BNC   01B0
0017A:  BNZ   0182
0017C:  MOVF   x82,W
0017E:  SUBLW  F3
00180:  BNC   01B0
....................    {
....................       UART2_Buffer[UART2_Byte_Counter] = fgetc(debug);
00182:  MOVLW  8E
00184:  ADDWF  x82,W
00186:  MOVWF  FE9
00188:  MOVLW  03
0018A:  ADDWFC x83,W
0018C:  MOVWF  FEA
0018E:  MOVFF  FEA,612
00192:  MOVFF  FE9,611
00196:  MOVLB  0
00198:  RCALL  012A
0019A:  MOVFF  612,FEA
0019E:  MOVFF  611,FE9
001A2:  MOVFF  01,FEF
....................       UART2_Byte_Counter++;
001A6:  MOVLB  5
001A8:  INCF   x82,F
001AA:  BTFSC  FD8.2
001AC:  INCF   x83,F
....................    }
001AE:  BRA    01BA
....................    
....................    else UART2_Overflow = fgetc(debug);
001B0:  MOVLB  0
001B2:  RCALL  012A
001B4:  MOVFF  01,584
001B8:  MOVLB  5
001BA:  BCF    FA4.5
001BC:  MOVLB  0
001BE:  GOTO   0074
.................... }
.................... 
.................... //****************** UART 2 Available******************
.................... //*****************************************************
.................... 
.................... unsigned int16 UART2_Available()
.................... {
....................    if (UART2_Byte_Counter > 0) 
*
00B74:  MOVLB  5
00B76:  MOVF   x82,F
00B78:  BNZ   0B7E
00B7A:  MOVF   x83,F
00B7C:  BZ    0B8A
....................    {
....................     return UART2_Byte_Counter ;
00B7E:  MOVFF  582,01
00B82:  MOVFF  583,02
00B86:  BRA    0B90
....................    }
00B88:  BRA    0B90
....................   
....................    else return 0;
00B8A:  MOVLW  00
00B8C:  MOVWF  01
00B8E:  MOVWF  02
00B90:  MOVLB  0
00B92:  RETURN 0
.................... }
.................... 
.................... //****************** UART 2 Read **********************
.................... //*****************************************************
.................... 
.................... unsigned int8 UART2_Read()
.................... {
....................    if (UART2_Byte_Counter>0)
00B94:  MOVLB  5
00B96:  MOVF   x82,F
00B98:  BNZ   0B9E
00B9A:  MOVF   x83,F
00B9C:  BZ    0BCA
....................    {    
....................       UART2_Temp_byte = UART2_Buffer[UART2_Read_Byte_counter];
00B9E:  MOVLW  8E
00BA0:  ADDWF  x85,W
00BA2:  MOVWF  FE9
00BA4:  MOVLW  03
00BA6:  MOVWF  FEA
00BA8:  BTFSC  FD8.0
00BAA:  INCF   FEA,F
00BAC:  MOVFF  FEF,586
....................       
....................       UART2_Byte_Counter--;
00BB0:  MOVF   x82,W
00BB2:  BTFSC  FD8.2
00BB4:  DECF   x83,F
00BB6:  DECF   x82,F
....................       UART2_Read_Byte_counter++;
00BB8:  INCF   x85,F
....................       if(UART2_Byte_Counter == 0) UART2_Read_Byte_counter = 0;
00BBA:  MOVF   x82,F
00BBC:  BNZ   0BC4
00BBE:  MOVF   x83,F
00BC0:  BNZ   0BC4
00BC2:  CLRF   x85
....................       return UART2_Temp_byte; 
00BC4:  MOVFF  586,01
00BC8:  BRA    0BDA
....................    }
....................    
....................    if (UART2_Byte_Counter == 0)
00BCA:  MOVF   x82,F
00BCC:  BNZ   0BDA
00BCE:  MOVF   x83,F
00BD0:  BNZ   0BDA
....................    { 
....................       UART2_Read_Byte_counter = 0;
00BD2:  CLRF   x85
....................       UART2_Temp_byte = 0x00;
00BD4:  CLRF   x86
....................       return UART2_Temp_byte; 
00BD6:  MOVFF  586,01
....................    }
00BDA:  MOVLB  0
00BDC:  GOTO   0C9A (RETURN)
....................  
.................... }
.................... 
.................... 
.................... 
.................... //*********************************************************************************
.................... // Check MBOSS and debug ports command
.................... // debug prot use for just check the command and MBOSS is the functional prot too.
.................... //*********************************************************************************
.................... 
.................... char DEBUG_CMD[50];
.................... void prnt();
.................... 
.................... 
.................... 
.................... 
.................... void TNC_MANUAL_SETTINGS_COMMAND()
.................... {
....................    if( UART2_Available() )
*
00C5E:  RCALL  0B74
00C60:  MOVF   01,W
00C62:  IORWF  02,W
00C64:  BTFSC  FD8.2
00C66:  BRA    0DCE
....................    {
....................       delay_ms(30);
00C68:  MOVLW  1E
00C6A:  MOVLB  6
00C6C:  MOVWF  x01
00C6E:  MOVLB  0
00C70:  RCALL  087E
....................       int _size = UART2_Available();
00C72:  RCALL  0B74
00C74:  MOVFF  01,5D4
....................       for(int i = 0; i<51; i++)
00C78:  MOVLB  5
00C7A:  CLRF   xD5
00C7C:  MOVF   xD5,W
00C7E:  SUBLW  32
00C80:  BNC   0CAC
....................       {
....................          DEBUG_CMD[i] = UART2_Read();
00C82:  CLRF   03
00C84:  MOVF   xD5,W
00C86:  ADDLW  87
00C88:  MOVWF  01
00C8A:  MOVLW  05
00C8C:  ADDWFC 03,F
00C8E:  MOVFF  01,5D8
00C92:  MOVFF  03,5D9
00C96:  MOVLB  0
00C98:  BRA    0B94
00C9A:  MOVFF  5D9,FEA
00C9E:  MOVFF  5D8,FE9
00CA2:  MOVFF  01,FEF
00CA6:  MOVLB  5
00CA8:  INCF   xD5,F
00CAA:  BRA    0C7C
....................       }
....................       
....................       fprintf(debug, "Received CMD - >> ");
00CAC:  MOVLW  C2
00CAE:  MOVWF  FF6
00CB0:  MOVLW  01
00CB2:  MOVWF  FF7
00CB4:  MOVLW  00
00CB6:  MOVWF  FF8
00CB8:  MOVLB  0
00CBA:  RCALL  0A64
.................... 
....................       for(int i=0; i<_size; i++)
00CBC:  MOVLB  5
00CBE:  CLRF   xD6
00CC0:  MOVF   xD4,W
00CC2:  SUBWF  xD6,W
00CC4:  BC    0CE2
....................       {
....................          fputc(DEBUG_CMD[i], debug);
00CC6:  CLRF   03
00CC8:  MOVF   xD6,W
00CCA:  ADDLW  87
00CCC:  MOVWF  FE9
00CCE:  MOVLW  05
00CD0:  ADDWFC 03,W
00CD2:  MOVWF  FEA
00CD4:  MOVFF  FEF,601
00CD8:  MOVLB  0
00CDA:  RCALL  0A20
00CDC:  MOVLB  5
00CDE:  INCF   xD6,F
00CE0:  BRA    0CC0
....................       }
....................       fprintf(debug,"\n\r");
00CE2:  MOVLW  0A
00CE4:  MOVLB  6
00CE6:  MOVWF  x01
00CE8:  MOVLB  0
00CEA:  RCALL  0A20
00CEC:  MOVLW  0D
00CEE:  MOVLB  6
00CF0:  MOVWF  x01
00CF2:  MOVLB  0
00CF4:  RCALL  0A20
....................       
....................       if( DEBUG_CMD[0] == 0x69 && DEBUG_CMD[1] == 0x69 && DEBUG_CMD[2] == 0x69 ) // cheack the i i i inputs and jump to flag 0xDD place
00CF6:  MOVLB  5
00CF8:  MOVF   x87,W
00CFA:  SUBLW  69
00CFC:  BNZ   0D46
00CFE:  MOVF   x88,W
00D00:  SUBLW  69
00D02:  BNZ   0D46
00D04:  MOVF   x89,W
00D06:  SUBLW  69
00D08:  BNZ   0D46
....................       {
....................          UF = 0xDD ;
00D0A:  MOVLW  DD
00D0C:  MOVWF  1B
....................          fprintf(debug, "UF Flag = %X\n\r", UF);
00D0E:  MOVLW  D6
00D10:  MOVWF  FF6
00D12:  MOVLW  01
00D14:  MOVWF  FF7
00D16:  MOVLW  00
00D18:  MOVWF  FF8
00D1A:  MOVLW  0A
00D1C:  MOVWF  xF5
00D1E:  MOVLB  0
00D20:  RCALL  0BE0
00D22:  MOVFF  1B,5F6
00D26:  MOVLW  37
00D28:  MOVLB  5
00D2A:  MOVWF  xF7
00D2C:  MOVLB  0
00D2E:  RCALL  0C10
00D30:  MOVLW  0A
00D32:  MOVLB  6
00D34:  MOVWF  x01
00D36:  MOVLB  0
00D38:  RCALL  0A20
00D3A:  MOVLW  0D
00D3C:  MOVLB  6
00D3E:  MOVWF  x01
00D40:  MOVLB  0
00D42:  RCALL  0A20
00D44:  MOVLB  5
....................       }   
....................       
....................       if( DEBUG_CMD[0] == 0x69 && DEBUG_CMD[1] == 0x69 && DEBUG_CMD[2] == 0x6A )// cheack the i i j inputs and jump to flag 0xCC place
00D46:  MOVF   x87,W
00D48:  SUBLW  69
00D4A:  BNZ   0D94
00D4C:  MOVF   x88,W
00D4E:  SUBLW  69
00D50:  BNZ   0D94
00D52:  MOVF   x89,W
00D54:  SUBLW  6A
00D56:  BNZ   0D94
....................       {
....................          UF = 0xCC ;
00D58:  MOVLW  CC
00D5A:  MOVWF  1B
....................          fprintf(debug, "UF Flag = %X\n\r", UF);
00D5C:  MOVLW  E6
00D5E:  MOVWF  FF6
00D60:  MOVLW  01
00D62:  MOVWF  FF7
00D64:  MOVLW  00
00D66:  MOVWF  FF8
00D68:  MOVLW  0A
00D6A:  MOVWF  xF5
00D6C:  MOVLB  0
00D6E:  RCALL  0BE0
00D70:  MOVFF  1B,5F6
00D74:  MOVLW  37
00D76:  MOVLB  5
00D78:  MOVWF  xF7
00D7A:  MOVLB  0
00D7C:  RCALL  0C10
00D7E:  MOVLW  0A
00D80:  MOVLB  6
00D82:  MOVWF  x01
00D84:  MOVLB  0
00D86:  RCALL  0A20
00D88:  MOVLW  0D
00D8A:  MOVLB  6
00D8C:  MOVWF  x01
00D8E:  MOVLB  0
00D90:  RCALL  0A20
00D92:  MOVLB  5
....................       }    
....................       
....................       if( DEBUG_CMD[0] != 0x69 )
00D94:  MOVF   x87,W
00D96:  SUBLW  69
00D98:  BZ    0DD0
....................       {
....................          for(int i=0; i<_size; i++)
00D9A:  CLRF   xD7
00D9C:  MOVF   xD4,W
00D9E:  SUBWF  xD7,W
00DA0:  BC    0DC0
....................          {
....................             fputc(DEBUG_CMD[i], TNC);
00DA2:  CLRF   03
00DA4:  MOVF   xD7,W
00DA6:  ADDLW  87
00DA8:  MOVWF  FE9
00DAA:  MOVLW  05
00DAC:  ADDWFC 03,W
00DAE:  MOVWF  FEA
00DB0:  MOVFF  FEF,5D8
00DB4:  MOVF   xD8,W
00DB6:  MOVLB  0
00DB8:  RCALL  0C56
00DBA:  MOVLB  5
00DBC:  INCF   xD7,F
00DBE:  BRA    0D9C
....................          }
....................          delay_ms(30);
00DC0:  MOVLW  1E
00DC2:  MOVLB  6
00DC4:  MOVWF  x01
00DC6:  MOVLB  0
00DC8:  RCALL  087E
....................          fputc(0x0A, TNC);
00DCA:  MOVLW  0A
00DCC:  RCALL  0C56
00DCE:  MOVLB  5
....................          //delay_ms(1000);
....................       }
....................    }
00DD0:  MOVLB  0
00DD2:  GOTO   26EE (RETURN)
.................... }
.................... 
.................... 
.................... // ********************check UART DATA Incomming from MBOSS *******************
.................... //
.................... //*****************************************************************************
.................... 
.................... 
.................... void CHECK_UART_INCOMING_FROM_MBOSS(int Len = 9 )
.................... {
....................    if( kbhit(MBOSS) )
*
00AD6:  BTFSC  F84.0
00AD8:  BRA    0B6E
....................    {
....................      int c = 0;
00ADA:  MOVLB  5
00ADC:  CLRF   xD5
....................      MBOSS_TO_APRS_ARRAY[c] = fgetc(MBOSS); 
00ADE:  CLRF   03
00AE0:  MOVF   xD5,W
00AE2:  ADDLW  24
00AE4:  MOVWF  FE9
00AE6:  MOVLW  00
00AE8:  ADDWFC 03,W
00AEA:  MOVWF  FEA
00AEC:  MOVFF  FEA,5DD
00AF0:  MOVFF  FE9,5DC
00AF4:  MOVLB  0
00AF6:  RCALL  0A8C
00AF8:  MOVFF  5DD,FEA
00AFC:  MOVFF  5DC,FE9
00B00:  MOVFF  01,FEF
....................      c++;
00B04:  MOVLB  5
00B06:  INCF   xD5,F
....................       
....................       for(unsigned int32 i = 0; i<10000; i++)
00B08:  CLRF   xD9
00B0A:  CLRF   xD8
00B0C:  CLRF   xD7
00B0E:  CLRF   xD6
00B10:  MOVF   xD9,F
00B12:  BNZ   0B6E
00B14:  MOVF   xD8,F
00B16:  BNZ   0B6E
00B18:  MOVF   xD7,W
00B1A:  SUBLW  27
00B1C:  BNC   0B6E
00B1E:  BNZ   0B26
00B20:  MOVF   xD6,W
00B22:  SUBLW  0F
00B24:  BNC   0B6E
....................       {
....................          if( kbhit(MBOSS) ) 
00B26:  BTFSC  F84.0
00B28:  BRA    0B5C
....................          {
....................            MBOSS_TO_APRS_ARRAY[c] = fgetc(MBOSS);
00B2A:  CLRF   03
00B2C:  MOVF   xD5,W
00B2E:  ADDLW  24
00B30:  MOVWF  FE9
00B32:  MOVLW  00
00B34:  ADDWFC 03,W
00B36:  MOVWF  FEA
00B38:  MOVFF  FEA,5DD
00B3C:  MOVFF  FE9,5DC
00B40:  MOVLB  0
00B42:  RCALL  0A8C
00B44:  MOVFF  5DD,FEA
00B48:  MOVFF  5DC,FE9
00B4C:  MOVFF  01,FEF
....................            c++;
00B50:  MOVLB  5
00B52:  INCF   xD5,F
....................            if( c >=Len) break ;
00B54:  MOVF   xD4,W
00B56:  SUBWF  xD5,W
00B58:  BTFSC  FD8.0
00B5A:  BRA    0B6E
....................          }
00B5C:  MOVLW  01
00B5E:  ADDWF  xD6,F
00B60:  BTFSC  FD8.0
00B62:  INCF   xD7,F
00B64:  BTFSC  FD8.2
00B66:  INCF   xD8,F
00B68:  BTFSC  FD8.2
00B6A:  INCF   xD9,F
00B6C:  BRA    0B10
00B6E:  MOVLB  0
....................       }
....................    }
00B70:  GOTO   26EA (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void CLEAR_DATA_ARRAY(char array[],int size)
.................... {
....................    for(int i=0; i<size; i++)
*
01C2E:  MOVLB  5
01C30:  CLRF   xDB
01C32:  MOVF   xDA,W
01C34:  SUBWF  xDB,W
01C36:  BC    1C4A
....................    {
....................       array[i]=0;
01C38:  MOVF   xDB,W
01C3A:  ADDWF  xD8,W
01C3C:  MOVWF  FE9
01C3E:  MOVLW  00
01C40:  ADDWFC xD9,W
01C42:  MOVWF  FEA
01C44:  CLRF   FEF
01C46:  INCF   xDB,F
01C48:  BRA    1C32
....................    }
01C4A:  MOVLB  0
01C4C:  RETURN 0
.................... }
.................... 
.................... #include <Flashmem.c>
.................... 
.................... 
.................... 
.................... #define MOSI PIN_A0
.................... #define MISO PIN_A1
.................... #define SCK  PIN_A3
.................... 
.................... #define CSS  PIN_A2
.................... //#use spi(SPI1,MASTER,  BAUD=100000, BITS=8, STREAM=CFM, MODE=0)
.................... #use spi(MASTER, CLK=SCK, DI=MISO, DO=MOSI, BAUD=400000, BITS=8, STREAM=CFM, MODE=0, force_SW)
*
00776:  MOVLB  6
00778:  MOVF   x0A,W
0077A:  SUBLW  08
0077C:  BZ    0786
0077E:  MOVWF  x0C
00780:  RLCF   x09,F
00782:  DECFSZ x0C,F
00784:  BRA    0780
00786:  BSF    F92.1
00788:  BCF    F92.0
0078A:  BCF    F92.3
0078C:  BCF    F89.3
0078E:  MOVFF  60A,60C
00792:  BTFSS  x09.7
00794:  BCF    F89.0
00796:  BTFSC  x09.7
00798:  BSF    F89.0
0079A:  RLCF   x09,F
0079C:  BSF    F89.3
0079E:  RLCF   01,F
007A0:  BTFSS  F80.1
007A2:  BCF    01.0
007A4:  BTFSC  F80.1
007A6:  BSF    01.0
007A8:  BCF    F89.3
007AA:  DECFSZ x0C,F
007AC:  BRA    0792
007AE:  MOVLB  0
007B0:  RETURN 0
.................... 
.................... 
.................... void WRITE_ENABLE()
.................... {
....................    Output_Low(CSS);
*
00862:  BCF    F92.2
00864:  BCF    F89.2
....................    spi_xfer(CFM,0x06);                // Send 0x06 for write enable (Write enable Command)
00866:  MOVLW  06
00868:  MOVLB  6
0086A:  MOVWF  x09
0086C:  MOVLW  08
0086E:  MOVWF  x0A
00870:  MOVLW  01
00872:  MOVWF  x0B
00874:  MOVLB  0
00876:  RCALL  0776
....................    Output_High(CSS);
00878:  BCF    F92.2
0087A:  BSF    F89.2
....................    return;
0087C:  RETURN 0
.................... }
.................... 
.................... void SECTOR_ERASE(unsigned int32 sector_address, char Sector_size, int16 timedelay =1000)
.................... {
....................    unsigned int8 adsress[4];
....................    
....................    adsress[0]  = (unsigned int8)((sector_address>>24) & 0xFF);   // 0x _ _ 00 00 00
*
008A8:  MOVFF  5F8,00
008AC:  MOVLB  6
008AE:  MOVFF  00,5FC
....................    adsress[1]  = (unsigned int8)((sector_address>>16) & 0xFF);   // 0x 00 _ _ 00 00
008B2:  MOVFF  5F7,00
008B6:  MOVFF  5F8,602
008BA:  MOVFF  00,5FD
....................    adsress[2]  = (unsigned int8)((sector_address>>8) & 0xFF);    // 0x 00 00 _ _ 00
008BE:  MOVFF  5F6,00
008C2:  MOVFF  5F7,602
008C6:  MOVFF  5F8,603
008CA:  MOVFF  00,5FE
....................    adsress[3]  = (unsigned int8)((sector_address) & 0xFF);       // 0x 00 00 00 _ _
008CE:  MOVLB  5
008D0:  MOVFF  5F5,5FF
008D4:  CLRF   03
....................    
....................    WRITE_ENABLE();
008D6:  MOVLB  0
008D8:  RCALL  0862
....................    
....................    Output_Low(CSS);             //lower the CS PIN
008DA:  BCF    F92.2
008DC:  BCF    F89.2
.................... 
....................    ///////////////////////////////////////////////////////////////////
....................    if( Sector_size == 4  ) spi_xfer(CFM,0x21);                    // 4KB Sector erase
008DE:  MOVLB  5
008E0:  MOVF   xF9,W
008E2:  SUBLW  04
008E4:  BNZ   08FA
008E6:  MOVLW  21
008E8:  MOVLB  6
008EA:  MOVWF  x09
008EC:  MOVLW  08
008EE:  MOVWF  x0A
008F0:  MOVLW  01
008F2:  MOVWF  x0B
008F4:  MOVLB  0
008F6:  RCALL  0776
008F8:  MOVLB  5
....................    if( Sector_size == 32 ) spi_xfer(CFM,0x5C);                    // 32KB Sector erase
008FA:  MOVF   xF9,W
008FC:  SUBLW  20
008FE:  BNZ   0914
00900:  MOVLW  5C
00902:  MOVLB  6
00904:  MOVWF  x09
00906:  MOVLW  08
00908:  MOVWF  x0A
0090A:  MOVLW  01
0090C:  MOVWF  x0B
0090E:  MOVLB  0
00910:  RCALL  0776
00912:  MOVLB  5
....................    if( Sector_size == 64 ) spi_xfer(CFM,0xDC);                    // 64KB Sector erase
00914:  MOVF   xF9,W
00916:  SUBLW  40
00918:  BNZ   092E
0091A:  MOVLW  DC
0091C:  MOVLB  6
0091E:  MOVWF  x09
00920:  MOVLW  08
00922:  MOVWF  x0A
00924:  MOVLW  01
00926:  MOVWF  x0B
00928:  MOVLB  0
0092A:  RCALL  0776
0092C:  MOVLB  5
....................    
....................    spi_xfer(CFM,adsress[0]);   
0092E:  MOVFF  5FC,609
00932:  MOVLW  08
00934:  MOVLB  6
00936:  MOVWF  x0A
00938:  MOVLW  01
0093A:  MOVWF  x0B
0093C:  MOVLB  0
0093E:  RCALL  0776
....................    spi_xfer(CFM,adsress[1]);    
00940:  MOVFF  5FD,609
00944:  MOVLW  08
00946:  MOVLB  6
00948:  MOVWF  x0A
0094A:  MOVLW  01
0094C:  MOVWF  x0B
0094E:  MOVLB  0
00950:  RCALL  0776
....................    spi_xfer(CFM,adsress[2]);    
00952:  MOVFF  5FE,609
00956:  MOVLW  08
00958:  MOVLB  6
0095A:  MOVWF  x0A
0095C:  MOVLW  01
0095E:  MOVWF  x0B
00960:  MOVLB  0
00962:  RCALL  0776
....................    spi_xfer(CFM,adsress[3]);
00964:  MOVFF  5FF,609
00968:  MOVLW  08
0096A:  MOVLB  6
0096C:  MOVWF  x0A
0096E:  MOVLW  01
00970:  MOVWF  x0B
00972:  MOVLB  0
00974:  RCALL  0776
....................    //////////////////////////////////////////////////////////////////
....................  
....................    Output_High(CSS);;           //take CS PIN higher back
00976:  BCF    F92.2
00978:  BSF    F89.2
....................    delay_ms(timedelay);  
0097A:  MOVFF  5FB,600
0097E:  MOVLB  6
00980:  INCF   x00,F
00982:  DECF   x00,F
00984:  BTFSC  FD8.2
00986:  BRA    0992
00988:  SETF   x01
0098A:  MOVLB  0
0098C:  RCALL  087E
0098E:  MOVLB  6
00990:  BRA    0982
00992:  MOVFF  5FA,601
00996:  MOVLB  0
00998:  RCALL  087E
....................    return;
0099A:  RETURN 0
.................... }
.................... 
.................... void BYTE_WRITE(unsigned int32 byte_address, int8 data)
.................... {
....................    unsigned int8 adsress[4];
....................    
....................    //Byte extraction
....................    adsress[0]  = (unsigned int8)((byte_address>>24) & 0xFF);   // 0x _ _ 00 00 00
*
01066:  MOVLB  6
01068:  MOVFF  601,603
0106C:  CLRF   03
....................    adsress[1]  = (unsigned int8)((byte_address>>16) & 0xFF);   // 0x 00 _ _ 00 00
0106E:  MOVFF  600,604
01072:  CLRF   03
....................    adsress[2]  = (unsigned int8)((byte_address>>8) & 0xFF);    // 0x 00 00 _ _ 00
01074:  MOVFF  5FF,00
01078:  MOVFF  00,605
....................    adsress[3]  = (unsigned int8)((byte_address) & 0xFF);       // 0x 00 00 00 _ _
0107C:  MOVLB  5
0107E:  MOVFF  5FE,606
01082:  CLRF   03
....................    
....................    WRITE_ENABLE();
01084:  MOVLB  0
01086:  CALL   0862
....................    
....................    Output_Low(CSS);           //lower the CS PIN
0108A:  BCF    F92.2
0108C:  BCF    F89.2
....................  
....................    
....................    ////////////////////////////////////////////////////////////////
....................    spi_xfer(CFM,0x12); //Byte WRITE COMAND  (0x12)
0108E:  MOVLW  12
01090:  MOVLB  6
01092:  MOVWF  x09
01094:  MOVLW  08
01096:  MOVWF  x0A
01098:  MOVLW  01
0109A:  MOVWF  x0B
0109C:  MOVLB  0
0109E:  CALL   0776
....................    spi_xfer(CFM,adsress[0]);    
010A2:  MOVFF  603,609
010A6:  MOVLW  08
010A8:  MOVLB  6
010AA:  MOVWF  x0A
010AC:  MOVLW  01
010AE:  MOVWF  x0B
010B0:  MOVLB  0
010B2:  CALL   0776
....................    spi_xfer(CFM,adsress[1]);    
010B6:  MOVFF  604,609
010BA:  MOVLW  08
010BC:  MOVLB  6
010BE:  MOVWF  x0A
010C0:  MOVLW  01
010C2:  MOVWF  x0B
010C4:  MOVLB  0
010C6:  CALL   0776
....................    spi_xfer(CFM,adsress[2]);    
010CA:  MOVFF  605,609
010CE:  MOVLW  08
010D0:  MOVLB  6
010D2:  MOVWF  x0A
010D4:  MOVLW  01
010D6:  MOVWF  x0B
010D8:  MOVLB  0
010DA:  CALL   0776
....................    spi_xfer(CFM,adsress[3]);
010DE:  MOVFF  606,609
010E2:  MOVLW  08
010E4:  MOVLB  6
010E6:  MOVWF  x0A
010E8:  MOVLW  01
010EA:  MOVWF  x0B
010EC:  MOVLB  0
010EE:  CALL   0776
....................    
....................    spi_xfer(CFM,data); 
010F2:  MOVFF  602,609
010F6:  MOVLW  08
010F8:  MOVLB  6
010FA:  MOVWF  x0A
010FC:  MOVLW  01
010FE:  MOVWF  x0B
01100:  MOVLB  0
01102:  CALL   0776
....................    ////////////////////////////////////////////////////////////////
....................    
....................    Output_High(CSS);         //take CS PIN higher back
01106:  BCF    F92.2
01108:  BSF    F89.2
.................... 
....................    return;
0110A:  RETURN 0
.................... }
.................... 
.................... unsigned int8 BYTE_READ(unsigned INT32 ADDRESS)
.................... {
.................... 
....................    unsigned int8 adsress[4];
....................    //Byte extraction
....................    adsress[0]  = (unsigned int8)((ADDRESS>>24) & 0xFF);   // 0x _ _ 00 00 00
*
007B2:  MOVFF  5FF,00
007B6:  MOVLB  6
007B8:  MOVFF  00,600
....................    adsress[1]  = (unsigned int8)((ADDRESS>>16) & 0xFF);   // 0x 00 _ _ 00 00
007BC:  MOVFF  5FE,00
007C0:  MOVFF  5FF,607
007C4:  MOVFF  00,601
....................    adsress[2]  = (unsigned int8)((ADDRESS>>8) & 0xFF);    // 0x 00 00 _ _ 00
007C8:  MOVFF  5FD,00
007CC:  MOVFF  5FE,607
007D0:  MOVFF  5FF,608
007D4:  MOVFF  00,602
....................    adsress[3]  = (unsigned int8)((ADDRESS) & 0xFF);       // 0x 00 00 00 _ _
007D8:  MOVLB  5
007DA:  MOVFF  5FC,603
007DE:  CLRF   03
....................    
....................    Output_Low(CSS);                //lower the CS PIN
007E0:  BCF    F92.2
007E2:  BCF    F89.2
....................  
....................     //////////////////////////////////////////////////////////////////
....................    int8 data;
....................    spi_xfer(CFM,0X13);  //READ DATA COMAND   (0x13)
007E4:  MOVLW  13
007E6:  MOVLB  6
007E8:  MOVWF  x09
007EA:  MOVLW  08
007EC:  MOVWF  x0A
007EE:  MOVLW  01
007F0:  MOVWF  x0B
007F2:  MOVLB  0
007F4:  RCALL  0776
....................    spi_xfer(CFM,adsress[0]);
007F6:  MOVFF  600,609
007FA:  MOVLW  08
007FC:  MOVLB  6
007FE:  MOVWF  x0A
00800:  MOVLW  01
00802:  MOVWF  x0B
00804:  MOVLB  0
00806:  RCALL  0776
....................    spi_xfer(CFM,adsress[1]);
00808:  MOVFF  601,609
0080C:  MOVLW  08
0080E:  MOVLB  6
00810:  MOVWF  x0A
00812:  MOVLW  01
00814:  MOVWF  x0B
00816:  MOVLB  0
00818:  RCALL  0776
....................    spi_xfer(CFM,adsress[2]);
0081A:  MOVFF  602,609
0081E:  MOVLW  08
00820:  MOVLB  6
00822:  MOVWF  x0A
00824:  MOVLW  01
00826:  MOVWF  x0B
00828:  MOVLB  0
0082A:  RCALL  0776
....................    spi_xfer(CFM,adsress[3]);
0082C:  MOVFF  603,609
00830:  MOVLW  08
00832:  MOVLB  6
00834:  MOVWF  x0A
00836:  MOVLW  01
00838:  MOVWF  x0B
0083A:  MOVLB  0
0083C:  RCALL  0776
....................  
....................    data = spi_xfer(CFM);
0083E:  MOVLW  01
00840:  MOVLB  6
00842:  MOVWF  x09
00844:  MOVLW  08
00846:  MOVWF  x0A
00848:  MOVLW  01
0084A:  MOVWF  x0B
0084C:  MOVLB  0
0084E:  RCALL  0776
00850:  MOVFF  01,604
....................    //////////////////////////////////////////////////////////////////
....................  
....................    Output_High(CSS);               //take CS PIN higher back
00854:  BCF    F92.2
00856:  BSF    F89.2
....................    return data;
00858:  MOVLB  6
0085A:  MOVFF  604,01
0085E:  MOVLB  0
00860:  RETURN 0
.................... }
.................... 
.................... 
.................... char uartflag = 0;
.................... #include <APRS Settings.c>
.................... 
.................... 
.................... void prnt()
.................... {
....................    while(UART1_available())
....................    {
....................       fputc(UART1_READ(), debug);
....................    }
.................... }
.................... 
.................... //*************************** TNC Booting time Settings ***********************
.................... //
.................... //*****************************************************************************
.................... 
.................... void boot_Kiss_Mode(int16 t1)
.................... {
....................    UART1_flush();
....................    fprintf(debug, "kiss command to TNC\n\r");
....................    fprintf(TNC, "kiss\n");
....................    delay_ms(t1);
....................    prnt();
.................... }
.................... 
.................... //******************************** Trying to go to Monitor Mode ***************
.................... //
.................... //*****************************************************************************
.................... 
.................... void TRYING_TO_PUT_DIGIPETER_TO_MONITOR_MODE(int noftimes)
.................... {
....................    char flagtnc = 0;
....................    for( int i = 0; i<noftimes; i++)
....................    {
....................       fprintf(debug, "TRY = %X\n\r", i+1);
....................       UART1_flush();
....................       fprintf(TNC, "monitor\n");
....................       delay_ms(1000);
....................       
....................       for(int j = 0; j<100 ;j++)
....................       {
....................          TNC_TO_PIC_ARRAY[j] = UART1_Read();
....................       }
....................       
....................       
....................       for(int m = 0; m<30; m++)
....................       {
....................          if( TNC_TO_PIC_ARRAY[m] == 0x55)
....................          {
....................             if( TNC_TO_PIC_ARRAY[m+29] == 0x65)
....................             {
....................                flagtnc = 0x69;
....................                fprintf(debug, "TNC is now in Monitor mode\n\r");
....................                break;
....................             }
....................          }
....................       }
....................       
....................       if( flagtnc == 0x69 ) break;
....................       delay_ms(2000);
....................    }
.................... }
.................... 
.................... //******************Check KISS Frame Data and Save it In Flash*****************
.................... //                        Digipeater Mode and S&F Mode
.................... //*****************************************************************************
.................... unsigned int32 MLC = 0;
.................... unsigned int16 Sec_count = 0;
.................... unsigned int16 header1 = 0;
.................... unsigned int16 footer1 = 0;
.................... unsigned int16 header2 = 0;
.................... unsigned int16 footer2 = 0;
.................... 
.................... //unsigned int32 C_ADD;
.................... unsigned int32 LBL_D = 0; 
.................... unsigned int32 LBL_S = 0; 
.................... 
.................... void CHECK_KISS_FRAME_DATA_AND_SAVE(unsigned int16 num)
.................... {
....................    MLC++;
*
0110C:  MOVLW  01
0110E:  MOVLB  5
01110:  ADDWF  xBC,F
01112:  BTFSC  FD8.0
01114:  INCF   xBD,F
01116:  BTFSC  FD8.2
01118:  INCF   xBE,F
0111A:  BTFSC  FD8.2
0111C:  INCF   xBF,F
....................    
....................    if(MLC >=num)
0111E:  MOVF   xBF,F
01120:  BNZ   113C
01122:  MOVF   xBE,F
01124:  BNZ   113C
01126:  MOVF   xD5,W
01128:  SUBWF  xBD,W
0112A:  BTFSS  FD8.0
0112C:  GOTO   1C1C
01130:  BNZ   113C
01132:  MOVF   xD4,W
01134:  SUBWF  xBC,W
01136:  BTFSS  FD8.0
01138:  GOTO   1C1C
....................    {
....................       Sec_count++;
0113C:  INCF   xC0,F
0113E:  BTFSC  FD8.2
01140:  INCF   xC1,F
....................       fprintf(debug,"%Ld\n\r",Sec_count);
01142:  MOVLW  10
01144:  MOVWF  FE9
01146:  MOVFF  5C1,5F6
0114A:  MOVFF  5C0,5F5
0114E:  MOVLB  0
01150:  BRA    0DD6
01152:  MOVLW  0A
01154:  MOVLB  6
01156:  MOVWF  x01
01158:  MOVLB  0
0115A:  RCALL  0A20
0115C:  MOVLW  0D
0115E:  MOVLB  6
01160:  MOVWF  x01
01162:  MOVLB  0
01164:  RCALL  0A20
....................       MLC = 0;
01166:  MOVLB  5
01168:  CLRF   xBF
0116A:  CLRF   xBE
0116C:  CLRF   xBD
0116E:  CLRF   xBC
....................       if(Sec_count>=200) Sec_count = 0;
01170:  MOVF   xC1,F
01172:  BNZ   117A
01174:  MOVF   xC0,W
01176:  SUBLW  C7
01178:  BC    117E
0117A:  CLRF   xC1
0117C:  CLRF   xC0
....................       
....................       for(int16 i = 0; i<490; i++)
0117E:  CLRF   xD7
01180:  CLRF   xD6
01182:  MOVF   xD7,W
01184:  SUBLW  01
01186:  BNC   11BC
01188:  BNZ   1190
0118A:  MOVF   xD6,W
0118C:  SUBLW  E9
0118E:  BNC   11BC
....................       {
....................          TNC_TO_PIC_ARRAY[i] = UART1_READ();
01190:  MOVLW  BA
01192:  ADDWF  xD6,W
01194:  MOVWF  01
01196:  MOVLW  00
01198:  ADDWFC xD7,W
0119A:  MOVWF  03
0119C:  MOVFF  01,5F5
011A0:  MOVWF  xF6
011A2:  MOVLB  0
011A4:  RCALL  0ED6
011A6:  MOVFF  5F6,FEA
011AA:  MOVFF  5F5,FE9
011AE:  MOVFF  01,FEF
011B2:  MOVLB  5
011B4:  INCF   xD6,F
011B6:  BTFSC  FD8.2
011B8:  INCF   xD7,F
011BA:  BRA    1182
....................       }
....................       
....................       for(int i = 0; i<5; i++)
011BC:  CLRF   xD8
011BE:  MOVF   xD8,W
011C0:  SUBLW  04
011C2:  BTFSS  FD8.0
011C4:  GOTO   1C1C
....................       {
....................          if(TNC_TO_PIC_ARRAY[i] == 0xC0)
011C8:  MOVLW  BA
011CA:  ADDWF  xD8,W
011CC:  MOVWF  FE9
011CE:  CLRF   FEA
011D0:  BTFSC  FD8.0
011D2:  INCF   FEA,F
011D4:  MOVF   FEF,W
011D6:  SUBLW  C0
011D8:  BTFSS  FD8.2
011DA:  GOTO   1C16
....................          {
....................             header1 = i;
011DE:  CLRF   xC3
011E0:  MOVFF  5D8,5C2
....................             
....................             for(int j = header1+1; j<120; j++)       // 
011E4:  MOVLW  01
011E6:  ADDWF  xC2,W
011E8:  MOVWF  xD9
011EA:  MOVF   xD9,W
011EC:  SUBLW  77
011EE:  BNC   1216
....................             {
....................                if(TNC_TO_PIC_ARRAY[j] == 0xC0)
011F0:  MOVLW  BA
011F2:  ADDWF  xD9,W
011F4:  MOVWF  FE9
011F6:  CLRF   FEA
011F8:  BTFSC  FD8.0
011FA:  INCF   FEA,F
011FC:  MOVF   FEF,W
011FE:  SUBLW  C0
01200:  BNZ   1212
....................                {
....................                   footer1 = j   ;
01202:  CLRF   xC5
01204:  MOVFF  5D9,5C4
....................                   header2 = j+1 ;
01208:  MOVLW  01
0120A:  ADDWF  xD9,W
0120C:  MOVWF  xC6
0120E:  CLRF   xC7
....................                   break;
01210:  BRA    1216
....................                }
01212:  INCF   xD9,F
01214:  BRA    11EA
....................             }
....................             
....................             for(int j = header2+1; j<250; j++)
01216:  MOVLW  01
01218:  ADDWF  xC6,W
0121A:  MOVWF  xDA
0121C:  MOVF   xDA,W
0121E:  SUBLW  F9
01220:  BNC   1240
....................             {
....................                if(TNC_TO_PIC_ARRAY[j] == 0xC0)
01222:  MOVLW  BA
01224:  ADDWF  xDA,W
01226:  MOVWF  FE9
01228:  CLRF   FEA
0122A:  BTFSC  FD8.0
0122C:  INCF   FEA,F
0122E:  MOVF   FEF,W
01230:  SUBLW  C0
01232:  BNZ   123C
....................                {
....................                   footer2 = j   ;
01234:  CLRF   xC9
01236:  MOVFF  5DA,5C8
....................                   break;
0123A:  BRA    1240
....................                }
0123C:  INCF   xDA,F
0123E:  BRA    121C
....................             }
....................             
....................             if( TNC_TO_PIC_ARRAY[header1] == 0xC0 && TNC_TO_PIC_ARRAY[footer1] == 0xC0 )
01240:  MOVLW  BA
01242:  ADDWF  xC2,W
01244:  MOVWF  FE9
01246:  MOVLW  00
01248:  ADDWFC xC3,W
0124A:  MOVWF  FEA
0124C:  MOVF   FEF,W
0124E:  SUBLW  C0
01250:  BTFSS  FD8.2
01252:  GOTO   1B7C
01256:  MOVLW  BA
01258:  ADDWF  xC4,W
0125A:  MOVWF  FE9
0125C:  MOVLW  00
0125E:  ADDWFC xC5,W
01260:  MOVWF  FEA
01262:  MOVF   FEF,W
01264:  SUBLW  C0
01266:  BTFSS  FD8.2
01268:  GOTO   1B7C
....................             {
....................                if( Mode_Flag == 0x0D ) // Data Save IN DP Mode
0126C:  MOVLB  2
0126E:  MOVF   xAE,W
01270:  SUBLW  0D
01272:  BTFSS  FD8.2
01274:  BRA    16E8
....................                { 
....................                   unsigned int32 Location = make32( BYTE_READ(NEXT_B_ADD_DP+1), BYTE_READ(NEXT_B_ADD_DP+2), BYTE_READ(NEXT_B_ADD_DP+3), BYTE_READ(NEXT_B_ADD_DP+4) );
01276:  MOVLW  01
01278:  ADDWF  1C,W
0127A:  MOVLB  5
0127C:  MOVWF  xF5
0127E:  MOVLW  00
01280:  ADDWFC 1D,W
01282:  MOVWF  xF6
01284:  MOVLW  00
01286:  ADDWFC 1E,W
01288:  MOVWF  xF7
0128A:  MOVLW  00
0128C:  ADDWFC 1F,W
0128E:  MOVWF  xF8
01290:  MOVWF  xFF
01292:  MOVFF  5F7,5FE
01296:  MOVFF  5F6,5FD
0129A:  MOVFF  5F5,5FC
0129E:  MOVLB  0
012A0:  CALL   07B2
012A4:  MOVFF  01,5F5
012A8:  MOVLW  02
012AA:  ADDWF  1C,W
012AC:  MOVLB  5
012AE:  MOVWF  xF6
012B0:  MOVLW  00
012B2:  ADDWFC 1D,W
012B4:  MOVWF  xF7
012B6:  MOVLW  00
012B8:  ADDWFC 1E,W
012BA:  MOVWF  xF8
012BC:  MOVLW  00
012BE:  ADDWFC 1F,W
012C0:  MOVWF  xF9
012C2:  MOVWF  xFF
012C4:  MOVFF  5F8,5FE
012C8:  MOVFF  5F7,5FD
012CC:  MOVFF  5F6,5FC
012D0:  MOVLB  0
012D2:  CALL   07B2
012D6:  MOVFF  01,5F6
012DA:  MOVLW  03
012DC:  ADDWF  1C,W
012DE:  MOVLB  5
012E0:  MOVWF  xF7
012E2:  MOVLW  00
012E4:  ADDWFC 1D,W
012E6:  MOVWF  xF8
012E8:  MOVLW  00
012EA:  ADDWFC 1E,W
012EC:  MOVWF  xF9
012EE:  MOVLW  00
012F0:  ADDWFC 1F,W
012F2:  MOVWF  xFA
012F4:  MOVWF  xFF
012F6:  MOVFF  5F9,5FE
012FA:  MOVFF  5F8,5FD
012FE:  MOVFF  5F7,5FC
01302:  MOVLB  0
01304:  CALL   07B2
01308:  MOVFF  01,5F7
0130C:  MOVLW  04
0130E:  ADDWF  1C,W
01310:  MOVLB  5
01312:  MOVWF  xF8
01314:  MOVLW  00
01316:  ADDWFC 1D,W
01318:  MOVWF  xF9
0131A:  MOVLW  00
0131C:  ADDWFC 1E,W
0131E:  MOVWF  xFA
01320:  MOVLW  00
01322:  ADDWFC 1F,W
01324:  MOVWF  xFB
01326:  MOVWF  xFF
01328:  MOVFF  5FA,5FE
0132C:  MOVFF  5F9,5FD
01330:  MOVFF  5F8,5FC
01334:  MOVLB  0
01336:  CALL   07B2
0133A:  MOVFF  5F5,5DE
0133E:  MOVFF  5F6,5DD
01342:  MOVFF  5F7,5DC
01346:  MOVFF  01,5DB
....................                   fprintf(Debug, "Location val = %LX\n\r ",Location );
0134A:  MOVLW  46
0134C:  MOVWF  FF6
0134E:  MOVLW  02
01350:  MOVWF  FF7
01352:  MOVLW  00
01354:  MOVWF  FF8
01356:  MOVLW  0F
01358:  MOVLB  5
0135A:  MOVWF  xF5
0135C:  MOVLB  0
0135E:  RCALL  0BE0
01360:  MOVFF  5DE,5F6
01364:  MOVLW  37
01366:  MOVLB  5
01368:  MOVWF  xF7
0136A:  MOVLB  0
0136C:  RCALL  0C10
0136E:  MOVFF  5DD,5F6
01372:  MOVLW  37
01374:  MOVLB  5
01376:  MOVWF  xF7
01378:  MOVLB  0
0137A:  RCALL  0C10
0137C:  MOVFF  5DC,5F6
01380:  MOVLW  37
01382:  MOVLB  5
01384:  MOVWF  xF7
01386:  MOVLB  0
01388:  RCALL  0C10
0138A:  MOVFF  5DB,5F6
0138E:  MOVLW  37
01390:  MOVLB  5
01392:  MOVWF  xF7
01394:  MOVLB  0
01396:  RCALL  0C10
01398:  MOVLW  58
0139A:  MOVWF  FF6
0139C:  MOVLW  02
0139E:  MOVWF  FF7
013A0:  MOVLW  00
013A2:  MOVWF  FF8
013A4:  MOVLW  03
013A6:  MOVLB  5
013A8:  MOVWF  xF5
013AA:  MOVLB  0
013AC:  RCALL  0BE0
....................                   if( location == 0xFFFFFFFF ) LBL_D = 0 ;
013AE:  MOVLB  5
013B0:  INCFSZ xDB,W
013B2:  BRA    13CA
013B4:  INCFSZ xDC,W
013B6:  BRA    13CA
013B8:  INCFSZ xDD,W
013BA:  BRA    13CA
013BC:  INCFSZ xDE,W
013BE:  BRA    13CA
013C0:  CLRF   xCD
013C2:  CLRF   xCC
013C4:  CLRF   xCB
013C6:  CLRF   xCA
013C8:  BRA    13DA
....................                   else LBL_D = location;
013CA:  MOVFF  5DE,5CD
013CE:  MOVFF  5DD,5CC
013D2:  MOVFF  5DC,5CB
013D6:  MOVFF  5DB,5CA
....................                   fprintf(Debug, "This packet start byte location = %Lu\n\r ",LBL_D );
013DA:  MOVLW  5C
013DC:  MOVWF  FF6
013DE:  MOVLW  02
013E0:  MOVWF  FF7
013E2:  MOVLW  00
013E4:  MOVWF  FF8
013E6:  MOVLW  22
013E8:  MOVWF  xF5
013EA:  MOVLB  0
013EC:  CALL   0BE0
013F0:  MOVLW  41
013F2:  MOVWF  FE9
013F4:  MOVFF  5CD,5F8
013F8:  MOVFF  5CC,5F7
013FC:  MOVFF  5CB,5F6
01400:  MOVFF  5CA,5F5
01404:  RCALL  0FA2
01406:  MOVLW  81
01408:  MOVWF  FF6
0140A:  MOVLW  02
0140C:  MOVWF  FF7
0140E:  MOVLW  00
01410:  MOVWF  FF8
01412:  MOVLW  03
01414:  MOVLB  5
01416:  MOVWF  xF5
01418:  MOVLB  0
0141A:  CALL   0BE0
....................                   
....................                   for( unsigned int32 i = 0; i<=footer1; i++ )
0141E:  MOVLB  5
01420:  CLRF   xE2
01422:  CLRF   xE1
01424:  CLRF   xE0
01426:  CLRF   xDF
01428:  MOVF   xE2,F
0142A:  BNZ   14AE
0142C:  MOVF   xE1,F
0142E:  BNZ   14AE
01430:  MOVF   xE0,W
01432:  SUBWF  xC5,W
01434:  BNC   14AE
01436:  BNZ   143E
01438:  MOVF   xDF,W
0143A:  SUBWF  xC4,W
0143C:  BNC   14AE
....................                   {
....................                      BYTE_WRITE( (DGP_LOCATION + i + LBL_D) , TNC_TO_PIC_ARRAY[i] );
0143E:  MOVF   xDF,W
01440:  MOVLB  2
01442:  ADDWF  xB3,W
01444:  MOVLB  5
01446:  MOVWF  xF5
01448:  MOVF   xE0,W
0144A:  MOVLB  2
0144C:  ADDWFC xB4,W
0144E:  MOVLB  5
01450:  MOVWF  xF6
01452:  MOVF   xE1,W
01454:  MOVLB  2
01456:  ADDWFC xB5,W
01458:  MOVLB  5
0145A:  MOVWF  xF7
0145C:  MOVF   xE2,W
0145E:  MOVLB  2
01460:  ADDWFC xB6,W
01462:  MOVLB  5
01464:  MOVWF  xF8
01466:  MOVF   xCA,W
01468:  ADDWF  xF5,F
0146A:  MOVF   xCB,W
0146C:  ADDWFC xF6,F
0146E:  MOVF   xCC,W
01470:  ADDWFC xF7,F
01472:  MOVF   xCD,W
01474:  ADDWFC xF8,F
01476:  MOVLW  BA
01478:  ADDWF  xDF,W
0147A:  MOVWF  FE9
0147C:  MOVLW  00
0147E:  ADDWFC xE0,W
01480:  MOVWF  FEA
01482:  MOVFF  FEF,602
01486:  MOVFF  5F8,601
0148A:  MOVFF  5F7,600
0148E:  MOVFF  5F6,5FF
01492:  MOVFF  5F5,5FE
01496:  MOVLB  0
01498:  RCALL  1066
0149A:  MOVLW  01
0149C:  MOVLB  5
0149E:  ADDWF  xDF,F
014A0:  BTFSC  FD8.0
014A2:  INCF   xE0,F
014A4:  BTFSC  FD8.2
014A6:  INCF   xE1,F
014A8:  BTFSC  FD8.2
014AA:  INCF   xE2,F
014AC:  BRA    1428
....................                   }
....................                   
....................                   fprintf(debug,"Received packet Digipeter mode --> ");
014AE:  MOVLW  86
014B0:  MOVWF  FF6
014B2:  MOVLW  02
014B4:  MOVWF  FF7
014B6:  MOVLW  00
014B8:  MOVWF  FF8
014BA:  MOVLB  0
014BC:  CALL   0A64
....................                   {
....................                      for( unsigned int32 i = 0; i<=footer1; i++ )
014C0:  MOVLB  5
014C2:  CLRF   xE6
014C4:  CLRF   xE5
014C6:  CLRF   xE4
014C8:  CLRF   xE3
014CA:  MOVF   xE6,F
014CC:  BNZ   1562
014CE:  MOVF   xE5,F
014D0:  BNZ   1562
014D2:  MOVF   xE4,W
014D4:  SUBWF  xC5,W
014D6:  BNC   1562
014D8:  BNZ   14E0
014DA:  MOVF   xE3,W
014DC:  SUBWF  xC4,W
014DE:  BNC   1562
....................                      {
....................                         fprintf(Debug, "%X ", BYTE_READ( (DGP_LOCATION + i + LBL_D)) );
014E0:  MOVF   xE3,W
014E2:  MOVLB  2
014E4:  ADDWF  xB3,W
014E6:  MOVLB  5
014E8:  MOVWF  xF5
014EA:  MOVF   xE4,W
014EC:  MOVLB  2
014EE:  ADDWFC xB4,W
014F0:  MOVLB  5
014F2:  MOVWF  xF6
014F4:  MOVF   xE5,W
014F6:  MOVLB  2
014F8:  ADDWFC xB5,W
014FA:  MOVLB  5
014FC:  MOVWF  xF7
014FE:  MOVF   xE6,W
01500:  MOVLB  2
01502:  ADDWFC xB6,W
01504:  MOVLB  5
01506:  MOVWF  xF8
01508:  MOVF   xCA,W
0150A:  ADDWF  xF5,F
0150C:  MOVF   xCB,W
0150E:  ADDWFC xF6,F
01510:  MOVF   xCC,W
01512:  ADDWFC xF7,F
01514:  MOVF   xCD,W
01516:  ADDWFC xF8,F
01518:  MOVFF  5F8,5FF
0151C:  MOVFF  5F7,5FE
01520:  MOVFF  5F6,5FD
01524:  MOVFF  5F5,5FC
01528:  MOVLB  0
0152A:  CALL   07B2
0152E:  MOVFF  01,5F5
01532:  MOVFF  01,5F6
01536:  MOVLW  37
01538:  MOVLB  5
0153A:  MOVWF  xF7
0153C:  MOVLB  0
0153E:  CALL   0C10
01542:  MOVLW  20
01544:  MOVLB  6
01546:  MOVWF  x01
01548:  MOVLB  0
0154A:  CALL   0A20
0154E:  MOVLW  01
01550:  MOVLB  5
01552:  ADDWF  xE3,F
01554:  BTFSC  FD8.0
01556:  INCF   xE4,F
01558:  BTFSC  FD8.2
0155A:  INCF   xE5,F
0155C:  BTFSC  FD8.2
0155E:  INCF   xE6,F
01560:  BRA    14CA
....................                      }
....................                   }
....................                   fprintf(debug,"\n\r");
01562:  MOVLW  0A
01564:  MOVLB  6
01566:  MOVWF  x01
01568:  MOVLB  0
0156A:  CALL   0A20
0156E:  MOVLW  0D
01570:  MOVLB  6
01572:  MOVWF  x01
01574:  MOVLB  0
01576:  CALL   0A20
....................                   
....................                   LBL_D =  LBL_D+ footer1 + 1; // next place
0157A:  MOVLB  5
0157C:  MOVF   xC4,W
0157E:  ADDWF  xCA,W
01580:  MOVWF  xF5
01582:  MOVF   xC5,W
01584:  ADDWFC xCB,W
01586:  MOVWF  xF6
01588:  MOVLW  00
0158A:  ADDWFC xCC,W
0158C:  MOVWF  xF7
0158E:  MOVLW  00
01590:  ADDWFC xCD,W
01592:  MOVWF  xF8
01594:  MOVLW  01
01596:  ADDWF  xF5,W
01598:  MOVWF  xCA
0159A:  MOVLW  00
0159C:  ADDWFC xF6,W
0159E:  MOVWF  xCB
015A0:  MOVLW  00
015A2:  ADDWFC xF7,W
015A4:  MOVWF  xCC
015A6:  MOVLW  00
015A8:  ADDWFC xF8,W
015AA:  MOVWF  xCD
....................                   
....................                   SECTOR_ERASE(NEXT_B_ADD_DP, 4);
015AC:  MOVFF  1F,5F8
015B0:  MOVFF  1E,5F7
015B4:  MOVFF  1D,5F6
015B8:  MOVFF  1C,5F5
015BC:  MOVLW  04
015BE:  MOVWF  xF9
015C0:  MOVLW  03
015C2:  MOVWF  xFB
015C4:  MOVLW  E8
015C6:  MOVWF  xFA
015C8:  MOVLB  0
015CA:  CALL   08A8
....................                   BYTE_WRITE( NEXT_B_ADD_DP+1 , (char)( (LBL_D & 0xFF000000)>>24 ) );
015CE:  MOVLW  01
015D0:  ADDWF  1C,W
015D2:  MOVLB  5
015D4:  MOVWF  xF5
015D6:  MOVLW  00
015D8:  ADDWFC 1D,W
015DA:  MOVWF  xF6
015DC:  MOVLW  00
015DE:  ADDWFC 1E,W
015E0:  MOVWF  xF7
015E2:  MOVLW  00
015E4:  ADDWFC 1F,W
015E6:  MOVWF  xF8
015E8:  CLRF   xF9
015EA:  CLRF   xFA
015EC:  CLRF   xFB
015EE:  MOVFF  5CD,00
015F2:  CLRF   01
015F4:  CLRF   02
015F6:  CLRF   03
015F8:  MOVFF  00,5F9
015FC:  MOVFF  FE8,601
01600:  MOVFF  5F7,600
01604:  MOVFF  5F6,5FF
01608:  MOVFF  5F5,5FE
0160C:  MOVFF  00,602
01610:  MOVLB  0
01612:  RCALL  1066
....................                   BYTE_WRITE( NEXT_B_ADD_DP+2 , (char)( (LBL_D & 0x00FF0000)>>16 ) );
01614:  MOVLW  02
01616:  ADDWF  1C,W
01618:  MOVLB  5
0161A:  MOVWF  xF5
0161C:  MOVLW  00
0161E:  ADDWFC 1D,W
01620:  MOVWF  xF6
01622:  MOVLW  00
01624:  ADDWFC 1E,W
01626:  MOVWF  xF7
01628:  MOVLW  00
0162A:  ADDWFC 1F,W
0162C:  MOVWF  xF8
0162E:  CLRF   xF9
01630:  CLRF   xFA
01632:  CLRF   xFC
01634:  MOVFF  5CC,00
01638:  MOVFF  5FC,01
0163C:  CLRF   02
0163E:  CLRF   03
01640:  MOVFF  00,5F9
01644:  MOVFF  FE8,601
01648:  MOVFF  5F7,600
0164C:  MOVFF  5F6,5FF
01650:  MOVFF  5F5,5FE
01654:  MOVFF  00,602
01658:  MOVLB  0
0165A:  RCALL  1066
....................                   BYTE_WRITE( NEXT_B_ADD_DP+3 , (char)( (LBL_D & 0x0000FF00)>>8  ) );
0165C:  MOVLW  03
0165E:  ADDWF  1C,W
01660:  MOVLB  5
01662:  MOVWF  xF5
01664:  MOVLW  00
01666:  ADDWFC 1D,W
01668:  MOVWF  xF6
0166A:  MOVLW  00
0166C:  ADDWFC 1E,W
0166E:  MOVWF  xF7
01670:  MOVLW  00
01672:  ADDWFC 1F,W
01674:  MOVWF  xF8
01676:  CLRF   xF9
01678:  CLRF   xFB
0167A:  CLRF   xFC
0167C:  MOVFF  5CB,00
01680:  MOVFF  5FB,01
01684:  MOVFF  5FC,02
01688:  CLRF   03
0168A:  MOVFF  00,5F9
0168E:  MOVFF  FE8,601
01692:  MOVFF  5F7,600
01696:  MOVFF  5F6,5FF
0169A:  MOVFF  5F5,5FE
0169E:  MOVFF  00,602
016A2:  MOVLB  0
016A4:  RCALL  1066
....................                   BYTE_WRITE( NEXT_B_ADD_DP+4 , (char)( (LBL_D & 0x000000FF)     ) );
016A6:  MOVLW  04
016A8:  ADDWF  1C,W
016AA:  MOVLB  5
016AC:  MOVWF  xF5
016AE:  MOVLW  00
016B0:  ADDWFC 1D,W
016B2:  MOVWF  xF6
016B4:  MOVLW  00
016B6:  ADDWFC 1E,W
016B8:  MOVWF  xF7
016BA:  MOVLW  00
016BC:  ADDWFC 1F,W
016BE:  MOVWF  xF8
016C0:  MOVFF  5CA,00
016C4:  CLRF   01
016C6:  CLRF   02
016C8:  CLRF   03
016CA:  MOVFF  00,5F9
016CE:  MOVFF  FE8,601
016D2:  MOVFF  5F7,600
016D6:  MOVFF  5F6,5FF
016DA:  MOVFF  5F5,5FE
016DE:  MOVFF  00,602
016E2:  MOVLB  0
016E4:  RCALL  1066
016E6:  MOVLB  2
....................                }  
....................                       
....................                
....................                if( Mode_Flag == 0x1E )  // Data Save In S&F Mode
016E8:  MOVF   xAE,W
016EA:  SUBLW  1E
016EC:  BTFSS  FD8.2
016EE:  BRA    1B7A
....................                { 
....................                   unsigned int32 Location = make32( BYTE_READ(NEXT_B_ADD_SF+1), BYTE_READ(NEXT_B_ADD_SF+2), BYTE_READ(NEXT_B_ADD_SF+3), BYTE_READ(NEXT_B_ADD_SF+4) );
016F0:  MOVLW  01
016F2:  ADDWF  20,W
016F4:  MOVLB  5
016F6:  MOVWF  xF5
016F8:  MOVLW  00
016FA:  ADDWFC 21,W
016FC:  MOVWF  xF6
016FE:  MOVLW  00
01700:  ADDWFC 22,W
01702:  MOVWF  xF7
01704:  MOVLW  00
01706:  ADDWFC 23,W
01708:  MOVWF  xF8
0170A:  MOVWF  xFF
0170C:  MOVFF  5F7,5FE
01710:  MOVFF  5F6,5FD
01714:  MOVFF  5F5,5FC
01718:  MOVLB  0
0171A:  CALL   07B2
0171E:  MOVFF  01,5F5
01722:  MOVLW  02
01724:  ADDWF  20,W
01726:  MOVLB  5
01728:  MOVWF  xF6
0172A:  MOVLW  00
0172C:  ADDWFC 21,W
0172E:  MOVWF  xF7
01730:  MOVLW  00
01732:  ADDWFC 22,W
01734:  MOVWF  xF8
01736:  MOVLW  00
01738:  ADDWFC 23,W
0173A:  MOVWF  xF9
0173C:  MOVWF  xFF
0173E:  MOVFF  5F8,5FE
01742:  MOVFF  5F7,5FD
01746:  MOVFF  5F6,5FC
0174A:  MOVLB  0
0174C:  CALL   07B2
01750:  MOVFF  01,5F6
01754:  MOVLW  03
01756:  ADDWF  20,W
01758:  MOVLB  5
0175A:  MOVWF  xF7
0175C:  MOVLW  00
0175E:  ADDWFC 21,W
01760:  MOVWF  xF8
01762:  MOVLW  00
01764:  ADDWFC 22,W
01766:  MOVWF  xF9
01768:  MOVLW  00
0176A:  ADDWFC 23,W
0176C:  MOVWF  xFA
0176E:  MOVWF  xFF
01770:  MOVFF  5F9,5FE
01774:  MOVFF  5F8,5FD
01778:  MOVFF  5F7,5FC
0177C:  MOVLB  0
0177E:  CALL   07B2
01782:  MOVFF  01,5F7
01786:  MOVLW  04
01788:  ADDWF  20,W
0178A:  MOVLB  5
0178C:  MOVWF  xF8
0178E:  MOVLW  00
01790:  ADDWFC 21,W
01792:  MOVWF  xF9
01794:  MOVLW  00
01796:  ADDWFC 22,W
01798:  MOVWF  xFA
0179A:  MOVLW  00
0179C:  ADDWFC 23,W
0179E:  MOVWF  xFB
017A0:  MOVWF  xFF
017A2:  MOVFF  5FA,5FE
017A6:  MOVFF  5F9,5FD
017AA:  MOVFF  5F8,5FC
017AE:  MOVLB  0
017B0:  CALL   07B2
017B4:  MOVFF  5F5,5EA
017B8:  MOVFF  5F6,5E9
017BC:  MOVFF  5F7,5E8
017C0:  MOVFF  01,5E7
....................                   fprintf(Debug, "Location val = %LX\n\r ",Location );
017C4:  MOVLW  AA
017C6:  MOVWF  FF6
017C8:  MOVLW  02
017CA:  MOVWF  FF7
017CC:  MOVLW  00
017CE:  MOVWF  FF8
017D0:  MOVLW  0F
017D2:  MOVLB  5
017D4:  MOVWF  xF5
017D6:  MOVLB  0
017D8:  CALL   0BE0
017DC:  MOVFF  5EA,5F6
017E0:  MOVLW  37
017E2:  MOVLB  5
017E4:  MOVWF  xF7
017E6:  MOVLB  0
017E8:  CALL   0C10
017EC:  MOVFF  5E9,5F6
017F0:  MOVLW  37
017F2:  MOVLB  5
017F4:  MOVWF  xF7
017F6:  MOVLB  0
017F8:  CALL   0C10
017FC:  MOVFF  5E8,5F6
01800:  MOVLW  37
01802:  MOVLB  5
01804:  MOVWF  xF7
01806:  MOVLB  0
01808:  CALL   0C10
0180C:  MOVFF  5E7,5F6
01810:  MOVLW  37
01812:  MOVLB  5
01814:  MOVWF  xF7
01816:  MOVLB  0
01818:  CALL   0C10
0181C:  MOVLW  BC
0181E:  MOVWF  FF6
01820:  MOVLW  02
01822:  MOVWF  FF7
01824:  MOVLW  00
01826:  MOVWF  FF8
01828:  MOVLW  03
0182A:  MOVLB  5
0182C:  MOVWF  xF5
0182E:  MOVLB  0
01830:  CALL   0BE0
....................                   if( location == 0xFFFFFFFF ) LBL_S = 0 ;
01834:  MOVLB  5
01836:  INCFSZ xE7,W
01838:  BRA    1850
0183A:  INCFSZ xE8,W
0183C:  BRA    1850
0183E:  INCFSZ xE9,W
01840:  BRA    1850
01842:  INCFSZ xEA,W
01844:  BRA    1850
01846:  CLRF   xD1
01848:  CLRF   xD0
0184A:  CLRF   xCF
0184C:  CLRF   xCE
0184E:  BRA    1860
....................                   else LBL_S = location;
01850:  MOVFF  5EA,5D1
01854:  MOVFF  5E9,5D0
01858:  MOVFF  5E8,5CF
0185C:  MOVFF  5E7,5CE
....................                   fprintf(Debug, "This packet start byte location = %Lu\n\r ",LBL_S );
01860:  MOVLW  C0
01862:  MOVWF  FF6
01864:  MOVLW  02
01866:  MOVWF  FF7
01868:  MOVLW  00
0186A:  MOVWF  FF8
0186C:  MOVLW  22
0186E:  MOVWF  xF5
01870:  MOVLB  0
01872:  CALL   0BE0
01876:  MOVLW  41
01878:  MOVWF  FE9
0187A:  MOVFF  5D1,5F8
0187E:  MOVFF  5D0,5F7
01882:  MOVFF  5CF,5F6
01886:  MOVFF  5CE,5F5
0188A:  CALL   0FA2
0188E:  MOVLW  E5
01890:  MOVWF  FF6
01892:  MOVLW  02
01894:  MOVWF  FF7
01896:  MOVLW  00
01898:  MOVWF  FF8
0189A:  MOVLW  03
0189C:  MOVLB  5
0189E:  MOVWF  xF5
018A0:  MOVLB  0
018A2:  CALL   0BE0
....................                   
....................                   for( unsigned int32 i = 0; i<=footer1; i++ )
018A6:  MOVLB  5
018A8:  CLRF   xEE
018AA:  CLRF   xED
018AC:  CLRF   xEC
018AE:  CLRF   xEB
018B0:  MOVF   xEE,F
018B2:  BNZ   1938
018B4:  MOVF   xED,F
018B6:  BNZ   1938
018B8:  MOVF   xEC,W
018BA:  SUBWF  xC5,W
018BC:  BNC   1938
018BE:  BNZ   18C6
018C0:  MOVF   xEB,W
018C2:  SUBWF  xC4,W
018C4:  BNC   1938
....................                   {
....................                      BYTE_WRITE( (SNF_LOCATION + i + LBL_S) , TNC_TO_PIC_ARRAY[i] );
018C6:  MOVF   xEB,W
018C8:  MOVLB  2
018CA:  ADDWF  xAF,W
018CC:  MOVLB  5
018CE:  MOVWF  xF5
018D0:  MOVF   xEC,W
018D2:  MOVLB  2
018D4:  ADDWFC xB0,W
018D6:  MOVLB  5
018D8:  MOVWF  xF6
018DA:  MOVF   xED,W
018DC:  MOVLB  2
018DE:  ADDWFC xB1,W
018E0:  MOVLB  5
018E2:  MOVWF  xF7
018E4:  MOVF   xEE,W
018E6:  MOVLB  2
018E8:  ADDWFC xB2,W
018EA:  MOVLB  5
018EC:  MOVWF  xF8
018EE:  MOVF   xCE,W
018F0:  ADDWF  xF5,F
018F2:  MOVF   xCF,W
018F4:  ADDWFC xF6,F
018F6:  MOVF   xD0,W
018F8:  ADDWFC xF7,F
018FA:  MOVF   xD1,W
018FC:  ADDWFC xF8,F
018FE:  MOVLW  BA
01900:  ADDWF  xEB,W
01902:  MOVWF  FE9
01904:  MOVLW  00
01906:  ADDWFC xEC,W
01908:  MOVWF  FEA
0190A:  MOVFF  FEF,602
0190E:  MOVFF  5F8,601
01912:  MOVFF  5F7,600
01916:  MOVFF  5F6,5FF
0191A:  MOVFF  5F5,5FE
0191E:  MOVLB  0
01920:  CALL   1066
01924:  MOVLW  01
01926:  MOVLB  5
01928:  ADDWF  xEB,F
0192A:  BTFSC  FD8.0
0192C:  INCF   xEC,F
0192E:  BTFSC  FD8.2
01930:  INCF   xED,F
01932:  BTFSC  FD8.2
01934:  INCF   xEE,F
01936:  BRA    18B0
....................                   }
....................                   
....................                   fprintf(debug,"Received packet S&F mode --> ");
01938:  MOVLW  EA
0193A:  MOVWF  FF6
0193C:  MOVLW  02
0193E:  MOVWF  FF7
01940:  MOVLW  00
01942:  MOVWF  FF8
01944:  MOVLB  0
01946:  CALL   0A64
....................                   {
....................                      for( unsigned int32 i = 0; i<=footer1; i++ )
0194A:  MOVLB  5
0194C:  CLRF   xF2
0194E:  CLRF   xF1
01950:  CLRF   xF0
01952:  CLRF   xEF
01954:  MOVF   xF2,F
01956:  BNZ   19EC
01958:  MOVF   xF1,F
0195A:  BNZ   19EC
0195C:  MOVF   xF0,W
0195E:  SUBWF  xC5,W
01960:  BNC   19EC
01962:  BNZ   196A
01964:  MOVF   xEF,W
01966:  SUBWF  xC4,W
01968:  BNC   19EC
....................                      {
....................                         fprintf(Debug, "%X ", BYTE_READ( (SNF_LOCATION + i + LBL_S)) );
0196A:  MOVF   xEF,W
0196C:  MOVLB  2
0196E:  ADDWF  xAF,W
01970:  MOVLB  5
01972:  MOVWF  xF5
01974:  MOVF   xF0,W
01976:  MOVLB  2
01978:  ADDWFC xB0,W
0197A:  MOVLB  5
0197C:  MOVWF  xF6
0197E:  MOVF   xF1,W
01980:  MOVLB  2
01982:  ADDWFC xB1,W
01984:  MOVLB  5
01986:  MOVWF  xF7
01988:  MOVF   xF2,W
0198A:  MOVLB  2
0198C:  ADDWFC xB2,W
0198E:  MOVLB  5
01990:  MOVWF  xF8
01992:  MOVF   xCE,W
01994:  ADDWF  xF5,F
01996:  MOVF   xCF,W
01998:  ADDWFC xF6,F
0199A:  MOVF   xD0,W
0199C:  ADDWFC xF7,F
0199E:  MOVF   xD1,W
019A0:  ADDWFC xF8,F
019A2:  MOVFF  5F8,5FF
019A6:  MOVFF  5F7,5FE
019AA:  MOVFF  5F6,5FD
019AE:  MOVFF  5F5,5FC
019B2:  MOVLB  0
019B4:  CALL   07B2
019B8:  MOVFF  01,5F5
019BC:  MOVFF  01,5F6
019C0:  MOVLW  37
019C2:  MOVLB  5
019C4:  MOVWF  xF7
019C6:  MOVLB  0
019C8:  CALL   0C10
019CC:  MOVLW  20
019CE:  MOVLB  6
019D0:  MOVWF  x01
019D2:  MOVLB  0
019D4:  CALL   0A20
019D8:  MOVLW  01
019DA:  MOVLB  5
019DC:  ADDWF  xEF,F
019DE:  BTFSC  FD8.0
019E0:  INCF   xF0,F
019E2:  BTFSC  FD8.2
019E4:  INCF   xF1,F
019E6:  BTFSC  FD8.2
019E8:  INCF   xF2,F
019EA:  BRA    1954
....................                      }
....................                   }
....................                   fprintf(debug,"\n\r");
019EC:  MOVLW  0A
019EE:  MOVLB  6
019F0:  MOVWF  x01
019F2:  MOVLB  0
019F4:  CALL   0A20
019F8:  MOVLW  0D
019FA:  MOVLB  6
019FC:  MOVWF  x01
019FE:  MOVLB  0
01A00:  CALL   0A20
....................                   
....................                   LBL_D =  LBL_S+ footer1 + 1; // next place
01A04:  MOVLB  5
01A06:  MOVF   xC4,W
01A08:  ADDWF  xCE,W
01A0A:  MOVWF  xF5
01A0C:  MOVF   xC5,W
01A0E:  ADDWFC xCF,W
01A10:  MOVWF  xF6
01A12:  MOVLW  00
01A14:  ADDWFC xD0,W
01A16:  MOVWF  xF7
01A18:  MOVLW  00
01A1A:  ADDWFC xD1,W
01A1C:  MOVWF  xF8
01A1E:  MOVLW  01
01A20:  ADDWF  xF5,W
01A22:  MOVWF  xCA
01A24:  MOVLW  00
01A26:  ADDWFC xF6,W
01A28:  MOVWF  xCB
01A2A:  MOVLW  00
01A2C:  ADDWFC xF7,W
01A2E:  MOVWF  xCC
01A30:  MOVLW  00
01A32:  ADDWFC xF8,W
01A34:  MOVWF  xCD
....................                   
....................                   SECTOR_ERASE(NEXT_B_ADD_SF, 4);
01A36:  MOVFF  23,5F8
01A3A:  MOVFF  22,5F7
01A3E:  MOVFF  21,5F6
01A42:  MOVFF  20,5F5
01A46:  MOVLW  04
01A48:  MOVWF  xF9
01A4A:  MOVLW  03
01A4C:  MOVWF  xFB
01A4E:  MOVLW  E8
01A50:  MOVWF  xFA
01A52:  MOVLB  0
01A54:  CALL   08A8
....................                   BYTE_WRITE( NEXT_B_ADD_SF+1 , (char)( (LBL_D & 0xFF000000)>>24 ) );
01A58:  MOVLW  01
01A5A:  ADDWF  20,W
01A5C:  MOVLB  5
01A5E:  MOVWF  xF5
01A60:  MOVLW  00
01A62:  ADDWFC 21,W
01A64:  MOVWF  xF6
01A66:  MOVLW  00
01A68:  ADDWFC 22,W
01A6A:  MOVWF  xF7
01A6C:  MOVLW  00
01A6E:  ADDWFC 23,W
01A70:  MOVWF  xF8
01A72:  CLRF   xF9
01A74:  CLRF   xFA
01A76:  CLRF   xFB
01A78:  MOVFF  5CD,00
01A7C:  CLRF   01
01A7E:  CLRF   02
01A80:  CLRF   03
01A82:  MOVFF  00,5F9
01A86:  MOVFF  FE8,601
01A8A:  MOVFF  5F7,600
01A8E:  MOVFF  5F6,5FF
01A92:  MOVFF  5F5,5FE
01A96:  MOVFF  00,602
01A9A:  MOVLB  0
01A9C:  CALL   1066
....................                   BYTE_WRITE( NEXT_B_ADD_SF+2 , (char)( (LBL_D & 0x00FF0000)>>16 ) );
01AA0:  MOVLW  02
01AA2:  ADDWF  20,W
01AA4:  MOVLB  5
01AA6:  MOVWF  xF5
01AA8:  MOVLW  00
01AAA:  ADDWFC 21,W
01AAC:  MOVWF  xF6
01AAE:  MOVLW  00
01AB0:  ADDWFC 22,W
01AB2:  MOVWF  xF7
01AB4:  MOVLW  00
01AB6:  ADDWFC 23,W
01AB8:  MOVWF  xF8
01ABA:  CLRF   xF9
01ABC:  CLRF   xFA
01ABE:  CLRF   xFC
01AC0:  MOVFF  5CC,00
01AC4:  MOVFF  5FC,01
01AC8:  CLRF   02
01ACA:  CLRF   03
01ACC:  MOVFF  00,5F9
01AD0:  MOVFF  FE8,601
01AD4:  MOVFF  5F7,600
01AD8:  MOVFF  5F6,5FF
01ADC:  MOVFF  5F5,5FE
01AE0:  MOVFF  00,602
01AE4:  MOVLB  0
01AE6:  CALL   1066
....................                   BYTE_WRITE( NEXT_B_ADD_SF+3 , (char)( (LBL_D & 0x0000FF00)>>8  ) );
01AEA:  MOVLW  03
01AEC:  ADDWF  20,W
01AEE:  MOVLB  5
01AF0:  MOVWF  xF5
01AF2:  MOVLW  00
01AF4:  ADDWFC 21,W
01AF6:  MOVWF  xF6
01AF8:  MOVLW  00
01AFA:  ADDWFC 22,W
01AFC:  MOVWF  xF7
01AFE:  MOVLW  00
01B00:  ADDWFC 23,W
01B02:  MOVWF  xF8
01B04:  CLRF   xF9
01B06:  CLRF   xFB
01B08:  CLRF   xFC
01B0A:  MOVFF  5CB,00
01B0E:  MOVFF  5FB,01
01B12:  MOVFF  5FC,02
01B16:  CLRF   03
01B18:  MOVFF  00,5F9
01B1C:  MOVFF  FE8,601
01B20:  MOVFF  5F7,600
01B24:  MOVFF  5F6,5FF
01B28:  MOVFF  5F5,5FE
01B2C:  MOVFF  00,602
01B30:  MOVLB  0
01B32:  CALL   1066
....................                   BYTE_WRITE( NEXT_B_ADD_SF+4, (char)( (LBL_D & 0x000000FF)     ) );
01B36:  MOVLW  04
01B38:  ADDWF  20,W
01B3A:  MOVLB  5
01B3C:  MOVWF  xF5
01B3E:  MOVLW  00
01B40:  ADDWFC 21,W
01B42:  MOVWF  xF6
01B44:  MOVLW  00
01B46:  ADDWFC 22,W
01B48:  MOVWF  xF7
01B4A:  MOVLW  00
01B4C:  ADDWFC 23,W
01B4E:  MOVWF  xF8
01B50:  MOVFF  5CA,00
01B54:  CLRF   01
01B56:  CLRF   02
01B58:  CLRF   03
01B5A:  MOVFF  00,5F9
01B5E:  MOVFF  FE8,601
01B62:  MOVFF  5F7,600
01B66:  MOVFF  5F6,5FF
01B6A:  MOVFF  5F5,5FE
01B6E:  MOVFF  00,602
01B72:  MOVLB  0
01B74:  CALL   1066
01B78:  MOVLB  2
01B7A:  MOVLB  5
....................                }  
....................                
....................             }
....................             
....................             if( TNC_TO_PIC_ARRAY[header1] == 0xC0 && TNC_TO_PIC_ARRAY[footer1] == 0xC0 )
01B7C:  MOVLW  BA
01B7E:  ADDWF  xC2,W
01B80:  MOVWF  FE9
01B82:  MOVLW  00
01B84:  ADDWFC xC3,W
01B86:  MOVWF  FEA
01B88:  MOVF   FEF,W
01B8A:  SUBLW  C0
01B8C:  BNZ   1C14
01B8E:  MOVLW  BA
01B90:  ADDWF  xC4,W
01B92:  MOVWF  FE9
01B94:  MOVLW  00
01B96:  ADDWFC xC5,W
01B98:  MOVWF  FEA
01B9A:  MOVF   FEF,W
01B9C:  SUBLW  C0
01B9E:  BNZ   1C14
....................             {
....................                fprintf(debug,"Deigipeted packet --> ");
01BA0:  MOVLW  08
01BA2:  MOVWF  FF6
01BA4:  MOVLW  03
01BA6:  MOVWF  FF7
01BA8:  MOVLW  00
01BAA:  MOVWF  FF8
01BAC:  MOVLB  0
01BAE:  CALL   0A64
....................                for(int16 i = header2; i<=footer2; i++)
01BB2:  MOVFF  5C7,5F4
01BB6:  MOVFF  5C6,5F3
01BBA:  MOVLB  5
01BBC:  MOVF   xF4,W
01BBE:  SUBWF  xC9,W
01BC0:  BNC   1BFA
01BC2:  BNZ   1BCA
01BC4:  MOVF   xF3,W
01BC6:  SUBWF  xC8,W
01BC8:  BNC   1BFA
....................                {
....................                   fprintf(Debug,"%X ", TNC_TO_PIC_ARRAY[i]);
01BCA:  MOVLW  BA
01BCC:  ADDWF  xF3,W
01BCE:  MOVWF  FE9
01BD0:  MOVLW  00
01BD2:  ADDWFC xF4,W
01BD4:  MOVWF  FEA
01BD6:  MOVFF  FEF,5F6
01BDA:  MOVLW  37
01BDC:  MOVWF  xF7
01BDE:  MOVLB  0
01BE0:  CALL   0C10
01BE4:  MOVLW  20
01BE6:  MOVLB  6
01BE8:  MOVWF  x01
01BEA:  MOVLB  0
01BEC:  CALL   0A20
01BF0:  MOVLB  5
01BF2:  INCF   xF3,F
01BF4:  BTFSC  FD8.2
01BF6:  INCF   xF4,F
01BF8:  BRA    1BBC
....................                }
....................                fprintf(debug,"\n\r");
01BFA:  MOVLW  0A
01BFC:  MOVLB  6
01BFE:  MOVWF  x01
01C00:  MOVLB  0
01C02:  CALL   0A20
01C06:  MOVLW  0D
01C08:  MOVLB  6
01C0A:  MOVWF  x01
01C0C:  MOVLB  0
01C0E:  CALL   0A20
01C12:  MOVLB  5
....................             }
....................             break;
01C14:  BRA    1C1C
....................          } 
01C16:  INCF   xD8,F
01C18:  GOTO   11BE
....................       }
....................       
.................... 
....................    }
01C1C:  MOVLB  0
01C1E:  GOTO   2704 (RETURN)
.................... }
....................    
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //*******************************TNC Setting **********************************
.................... //*****************************************************************************
.................... //*****************************************************************************
.................... 
.................... void TNC_Settings(int16 t  )
.................... {
....................    fprintf(debug, "config\n\r");
....................    fprintf(TNC, "config");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt(); 
....................    
....................    // sets the callsign. A-Z, 0-9, 6 characters max
....................    fprintf(debug, "call 4S7AC\n\r");
....................    fprintf(TNC, "call 4S7AC");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt(); 
....................    
....................    // sets the SSID: 0-15
....................    fprintf(debug, "ssid 0\n\r");
....................    fprintf(TNC, "ssid 0");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt(); 
....................    
....................    //sets preamble length in ms: 30-2550
....................    fprintf(debug, "txdelay 50\n\r");
....................    fprintf(TNC, "txdelay 50");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt(); 
....................    
....................    //sets tail length in ms: 10-2550
....................    fprintf(debug, "txtail 20\n\r");
....................    fprintf(TNC, "txtail 20");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt();   
....................    
....................    //sets quiet time (before TX) in ms: 100-2550
....................    fprintf(debug, "quiet 100\n\r");
....................    fprintf(TNC, "quiet 100");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt();   
....................           
....................     
....................    //sets UART1 baudrate: 1200-115200
....................    fprintf(debug, "rs1baud 9600\n\r");
....................    fprintf(TNC, "rs1baud 9600");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt(); 
....................    
....................    //sets UART2 baudrate: 1200-115200
....................    fprintf(debug, "rs2baud 9600\n\r");
....................    fprintf(TNC, "rs2baud 9600");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt(); 
....................   
....................    //sets DAC type: on for PWM, off for R2R
....................    fprintf(debug,"pwm on\n\r");
....................    fprintf(TNC,"pwm on");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt();  
....................    
....................    //digipeating of WIDEn-N type aliases. n and N numbers are NOT set here,
....................    fprintf(debug,"digi 0 alias WIDE\n\r");
....................    fprintf(TNC,"digi 0 alias WIDE");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt();  
....................    
....................    //allow paths up to WIDE1-1
....................    fprintf(debug,"digi 0 max 1\n\r");
....................    fprintf(TNC,"digi 0 max 1");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt(); 
....................    
....................    //no path replacement
....................    fprintf(debug,"digi 0 rep 0\n\r");
....................    fprintf(TNC,"digi 0 rep 0");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt(); 
....................    
....................    
....................    //WIDEn-N path is traceable (digipeater callsign should be put into the path)no path replacement
....................    fprintf(debug,"digi 0 trac off\n\r");
....................    fprintf(TNC,"digi 0 trac off");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt(); 
....................    
....................    //sets duplicate protection buffer hold time in secs: 5-255
....................    fprintf(debug,"digi dupe 5\n\r");
....................    fprintf(TNC,"digi dupe 5");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt(); 
....................    
....................    //enable specified slot
....................    fprintf(debug,"digi 0 on\n\r");
....................    fprintf(TNC,"digi 0 on");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt();    
....................    
....................    //enable specified slot
....................    fprintf(debug,"digi on\n\r");
....................    fprintf(TNC,"digi on");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt();  
....................    
....................    //configure modem for radios with flat audio output (on) or normal output (off)
....................    fprintf(debug, "flat off\n\r");
....................    fprintf(TNC, "flat off");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt();    
....................    
....................       
.................... 
....................    //sets interval between selected (0-7) beacon in minutes
....................    fprintf(debug, "beacon 0 iv 1\n\r");
....................    fprintf(TNC, "beacon 0 iv 1");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt();    
....................        
....................    //sets delay for transmitting selected (0-7) beacon
....................    fprintf(debug, "beacon 0 dl 1\n\r");
....................    fprintf(TNC, "beacon 0 dl 1");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt(); 
....................    
....................    //set path for selected (0-7) beacon: 1 element (like WIDE1-1), 2 elements
....................    fprintf(debug, "beacon 0 path WIDE1-1,WIDE2-2\n\r");
....................    fprintf(TNC, "beacon 0 path WIDE1-1,WIDE2-2");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt(); 
....................    
....................    //on enables, off disables selected (0-7) beacon
....................    fprintf(debug, "beacon 0 off\n\r");
....................    fprintf(TNC, "beacon 0 off");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt();    
....................    
....................    fprintf(debug, "monkiss on\n\r");
....................    fprintf(TNC, "monkiss on");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt(); 
....................    
....................    fprintf(debug, "save\n\r");
....................    fprintf(TNC, "save");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt(); 
....................    
....................    fprintf(debug, "monitor\n\r");
....................    fprintf(TNC, "monitor");
....................    delay_ms(100);
....................    fputc(0x0A,TNC);
....................    delay_ms(t);
....................    prnt(); 
....................    
.................... //!   fprintf(debug, "config\n\r");
.................... //!   fprintf(TNC, "config\n");
.................... //!   delay_ms(2000);
.................... //!   prnt();
.................... //!   
.................... //!   fprintf(debug, "print\n\r");
.................... //!   fprintf(TNC, "print\n");
.................... //!   
....................   
....................   
....................  
.................... }
.................... 
.................... 
.................... //*************************************Digi ON*********************************
.................... //
.................... //*****************************************************************************
.................... 
.................... void Digipeter_ON(int16 t=1000)
.................... {
....................    if (MBOSS_TO_APRS_ARRAY[2]== 0x0E)
*
01C94:  MOVF   26,W
01C96:  SUBLW  0E
01C98:  BNZ   1D70
....................    {
....................       // Ack to mboss
....................       CLEAR_DATA_ARRAY(APRS_TO_MBOSS_ARRAY,10);
01C9A:  MOVLB  5
01C9C:  CLRF   xD9
01C9E:  MOVLW  56
01CA0:  MOVWF  xD8
01CA2:  MOVLW  0A
01CA4:  MOVWF  xDA
01CA6:  MOVLB  0
01CA8:  RCALL  1C2E
....................       APRS_TO_MBOSS_ARRAY[0] = 0xE0;
01CAA:  MOVLW  E0
01CAC:  MOVWF  56
....................       APRS_TO_MBOSS_ARRAY[1] = 0xEE;
01CAE:  MOVLW  EE
01CB0:  MOVWF  57
....................       APRS_TO_MBOSS_ARRAY[2] = 0x0E;
01CB2:  MOVLW  0E
01CB4:  MOVWF  58
....................       APRS_TO_MBOSS_ARRAY[3] = 0xA0;
01CB6:  MOVLW  A0
01CB8:  MOVWF  59
....................       APRS_TO_MBOSS_ARRAY[8] = 0xED;
01CBA:  MOVLW  ED
01CBC:  MOVWF  5E
....................       for(int i = 0; i<9; i++) fputc(APRS_TO_MBOSS_ARRAY[i], mboss);
01CBE:  MOVLB  5
01CC0:  CLRF   xD6
01CC2:  MOVF   xD6,W
01CC4:  SUBLW  08
01CC6:  BNC   1CE4
01CC8:  CLRF   03
01CCA:  MOVF   xD6,W
01CCC:  ADDLW  56
01CCE:  MOVWF  FE9
01CD0:  MOVLW  00
01CD2:  ADDWFC 03,W
01CD4:  MOVWF  FEA
01CD6:  MOVFF  FEF,5E5
01CDA:  MOVLB  0
01CDC:  RCALL  1C4E
01CDE:  MOVLB  5
01CE0:  INCF   xD6,F
01CE2:  BRA    1CC2
....................       
....................       fprintf(debug, "Digipeater_ON command\n\r ");
01CE4:  MOVLW  A0
01CE6:  MOVWF  FF6
01CE8:  MOVLW  05
01CEA:  MOVWF  FF7
01CEC:  MOVLW  00
01CEE:  MOVWF  FF8
01CF0:  MOVLB  0
01CF2:  CALL   0A64
....................       
....................       Delay_ms(4000);
01CF6:  MOVLW  10
01CF8:  MOVLB  5
01CFA:  MOVWF  xD8
01CFC:  MOVLW  FA
01CFE:  MOVLB  6
01D00:  MOVWF  x01
01D02:  MOVLB  0
01D04:  CALL   087E
01D08:  MOVLB  5
01D0A:  DECFSZ xD8,F
01D0C:  BRA    1CFC
....................       
....................       Mode_Flag = 0x0D;   
01D0E:  MOVLW  0D
01D10:  MOVLB  2
01D12:  MOVWF  xAE
....................       
....................       CLEAR_DATA_ARRAY(APRS_TO_MBOSS_ARRAY,10);
01D14:  MOVLB  5
01D16:  CLRF   xD9
01D18:  MOVLW  56
01D1A:  MOVWF  xD8
01D1C:  MOVLW  0A
01D1E:  MOVWF  xDA
01D20:  MOVLB  0
01D22:  RCALL  1C2E
....................       APRS_TO_MBOSS_ARRAY[0] = 0xE0;
01D24:  MOVLW  E0
01D26:  MOVWF  56
....................       APRS_TO_MBOSS_ARRAY[1] = 0xEE;
01D28:  MOVLW  EE
01D2A:  MOVWF  57
....................       APRS_TO_MBOSS_ARRAY[2] = 0x0E;
01D2C:  MOVLW  0E
01D2E:  MOVWF  58
....................       APRS_TO_MBOSS_ARRAY[3] = 0xA1;
01D30:  MOVLW  A1
01D32:  MOVWF  59
....................       APRS_TO_MBOSS_ARRAY[8] = 0xED;
01D34:  MOVLW  ED
01D36:  MOVWF  5E
....................       for(int i = 0; i<9; i++) fputc(APRS_TO_MBOSS_ARRAY[i], mboss);
01D38:  MOVLB  5
01D3A:  CLRF   xD7
01D3C:  MOVF   xD7,W
01D3E:  SUBLW  08
01D40:  BNC   1D5E
01D42:  CLRF   03
01D44:  MOVF   xD7,W
01D46:  ADDLW  56
01D48:  MOVWF  FE9
01D4A:  MOVLW  00
01D4C:  ADDWFC 03,W
01D4E:  MOVWF  FEA
01D50:  MOVFF  FEF,5E5
01D54:  MOVLB  0
01D56:  RCALL  1C4E
01D58:  MOVLB  5
01D5A:  INCF   xD7,F
01D5C:  BRA    1D3C
....................       
....................        fprintf(debug, "Digipeater_ON command_ Exicuted\n\r ");
01D5E:  MOVLW  BA
01D60:  MOVWF  FF6
01D62:  MOVLW  05
01D64:  MOVWF  FF7
01D66:  MOVLW  00
01D68:  MOVWF  FF8
01D6A:  MOVLB  0
01D6C:  CALL   0A64
....................    }
01D70:  GOTO   27A0 (RETURN)
.................... 
.................... }
.................... 
.................... //**********************************Digi OFF***********************************
.................... //
.................... //*****************************************************************************
.................... 
.................... void Digipeter_OFF(int16 t=1000)
.................... {
....................    if( MBOSS_TO_APRS_ARRAY[2]== 0xFF)
01D74:  INCFSZ 26,W
01D76:  BRA    1E36
....................    {
....................       // Ack to mboss
....................       CLEAR_DATA_ARRAY(APRS_TO_MBOSS_ARRAY,10);
01D78:  MOVLB  5
01D7A:  CLRF   xD9
01D7C:  MOVLW  56
01D7E:  MOVWF  xD8
01D80:  MOVLW  0A
01D82:  MOVWF  xDA
01D84:  MOVLB  0
01D86:  RCALL  1C2E
....................       APRS_TO_MBOSS_ARRAY[0] = 0xE0;
01D88:  MOVLW  E0
01D8A:  MOVWF  56
....................       APRS_TO_MBOSS_ARRAY[1] = 0xEE;
01D8C:  MOVLW  EE
01D8E:  MOVWF  57
....................       APRS_TO_MBOSS_ARRAY[2] = 0xFF;
01D90:  SETF   58
....................       APRS_TO_MBOSS_ARRAY[3] = 0xA0;
01D92:  MOVLW  A0
01D94:  MOVWF  59
....................       APRS_TO_MBOSS_ARRAY[8] = 0xED;
01D96:  MOVLW  ED
01D98:  MOVWF  5E
....................       for(int i = 0; i<9; i++) fputc(APRS_TO_MBOSS_ARRAY[i], mboss);
01D9A:  MOVLB  5
01D9C:  CLRF   xD6
01D9E:  MOVF   xD6,W
01DA0:  SUBLW  08
01DA2:  BNC   1DC0
01DA4:  CLRF   03
01DA6:  MOVF   xD6,W
01DA8:  ADDLW  56
01DAA:  MOVWF  FE9
01DAC:  MOVLW  00
01DAE:  ADDWFC 03,W
01DB0:  MOVWF  FEA
01DB2:  MOVFF  FEF,5E5
01DB6:  MOVLB  0
01DB8:  RCALL  1C4E
01DBA:  MOVLB  5
01DBC:  INCF   xD6,F
01DBE:  BRA    1D9E
....................       
....................       
....................       Delay_ms(4000);
01DC0:  MOVLW  10
01DC2:  MOVWF  xD8
01DC4:  MOVLW  FA
01DC6:  MOVLB  6
01DC8:  MOVWF  x01
01DCA:  MOVLB  0
01DCC:  CALL   087E
01DD0:  MOVLB  5
01DD2:  DECFSZ xD8,F
01DD4:  BRA    1DC4
....................       Mode_Flag = 0x0E;
01DD6:  MOVLW  0E
01DD8:  MOVLB  2
01DDA:  MOVWF  xAE
....................       
....................       
....................       CLEAR_DATA_ARRAY(APRS_TO_MBOSS_ARRAY,10);
01DDC:  MOVLB  5
01DDE:  CLRF   xD9
01DE0:  MOVLW  56
01DE2:  MOVWF  xD8
01DE4:  MOVLW  0A
01DE6:  MOVWF  xDA
01DE8:  MOVLB  0
01DEA:  RCALL  1C2E
....................       APRS_TO_MBOSS_ARRAY[0] = 0xE0;
01DEC:  MOVLW  E0
01DEE:  MOVWF  56
....................       APRS_TO_MBOSS_ARRAY[1] = 0xEE;
01DF0:  MOVLW  EE
01DF2:  MOVWF  57
....................       APRS_TO_MBOSS_ARRAY[2] = 0xFF;
01DF4:  SETF   58
....................       APRS_TO_MBOSS_ARRAY[3] = 0xA1;
01DF6:  MOVLW  A1
01DF8:  MOVWF  59
....................       APRS_TO_MBOSS_ARRAY[8] = 0xED;
01DFA:  MOVLW  ED
01DFC:  MOVWF  5E
....................       for(int i = 0; i<9; i++) fputc(APRS_TO_MBOSS_ARRAY[i], mboss);
01DFE:  MOVLB  5
01E00:  CLRF   xD7
01E02:  MOVF   xD7,W
01E04:  SUBLW  08
01E06:  BNC   1E24
01E08:  CLRF   03
01E0A:  MOVF   xD7,W
01E0C:  ADDLW  56
01E0E:  MOVWF  FE9
01E10:  MOVLW  00
01E12:  ADDWFC 03,W
01E14:  MOVWF  FEA
01E16:  MOVFF  FEF,5E5
01E1A:  MOVLB  0
01E1C:  RCALL  1C4E
01E1E:  MOVLB  5
01E20:  INCF   xD7,F
01E22:  BRA    1E02
....................       
....................       fprintf(debug, "Digipeater_OFF command_Exicuted\n\r ");
01E24:  MOVLW  DE
01E26:  MOVWF  FF6
01E28:  MOVLW  05
01E2A:  MOVWF  FF7
01E2C:  MOVLW  00
01E2E:  MOVWF  FF8
01E30:  MOVLB  0
01E32:  CALL   0A64
....................    }
01E36:  GOTO   27B0 (RETURN)
.................... }
.................... 
.................... 
.................... //************************************ S&F ON *********************************
.................... //
.................... //*****************************************************************************
.................... 
.................... void STORE_AND_FORWARD_ON(int16 t =2000)
.................... {
....................    if( MBOSS_TO_APRS_ARRAY[2]== 0x1E)
01E3A:  MOVF   26,W
01E3C:  SUBLW  1E
01E3E:  BNZ   1F16
....................    {
....................       // Ack to mboss
....................       CLEAR_DATA_ARRAY(APRS_TO_MBOSS_ARRAY,10);
01E40:  MOVLB  5
01E42:  CLRF   xD9
01E44:  MOVLW  56
01E46:  MOVWF  xD8
01E48:  MOVLW  0A
01E4A:  MOVWF  xDA
01E4C:  MOVLB  0
01E4E:  RCALL  1C2E
....................       APRS_TO_MBOSS_ARRAY[0] = 0xE0;
01E50:  MOVLW  E0
01E52:  MOVWF  56
....................       APRS_TO_MBOSS_ARRAY[1] = 0xEE;
01E54:  MOVLW  EE
01E56:  MOVWF  57
....................       APRS_TO_MBOSS_ARRAY[2] = 0x1E;
01E58:  MOVLW  1E
01E5A:  MOVWF  58
....................       APRS_TO_MBOSS_ARRAY[3] = 0xA0;
01E5C:  MOVLW  A0
01E5E:  MOVWF  59
....................       APRS_TO_MBOSS_ARRAY[8] = 0xED;
01E60:  MOVLW  ED
01E62:  MOVWF  5E
....................       for(int i = 0; i<9; i++) fputc(APRS_TO_MBOSS_ARRAY[i], mboss);
01E64:  MOVLB  5
01E66:  CLRF   xD6
01E68:  MOVF   xD6,W
01E6A:  SUBLW  08
01E6C:  BNC   1E8A
01E6E:  CLRF   03
01E70:  MOVF   xD6,W
01E72:  ADDLW  56
01E74:  MOVWF  FE9
01E76:  MOVLW  00
01E78:  ADDWFC 03,W
01E7A:  MOVWF  FEA
01E7C:  MOVFF  FEF,5E5
01E80:  MOVLB  0
01E82:  RCALL  1C4E
01E84:  MOVLB  5
01E86:  INCF   xD6,F
01E88:  BRA    1E68
....................       
....................       
....................       
....................       fprintf(debug, "Store and forward on command\n\r ");
01E8A:  MOVLW  02
01E8C:  MOVWF  FF6
01E8E:  MOVLW  06
01E90:  MOVWF  FF7
01E92:  MOVLW  00
01E94:  MOVWF  FF8
01E96:  MOVLB  0
01E98:  CALL   0A64
....................       
....................       Delay_ms(4000);
01E9C:  MOVLW  10
01E9E:  MOVLB  5
01EA0:  MOVWF  xD8
01EA2:  MOVLW  FA
01EA4:  MOVLB  6
01EA6:  MOVWF  x01
01EA8:  MOVLB  0
01EAA:  CALL   087E
01EAE:  MOVLB  5
01EB0:  DECFSZ xD8,F
01EB2:  BRA    1EA2
....................       
....................       Mode_Flag = 0x1E;
01EB4:  MOVLW  1E
01EB6:  MOVLB  2
01EB8:  MOVWF  xAE
....................       
....................       CLEAR_DATA_ARRAY(APRS_TO_MBOSS_ARRAY,10);
01EBA:  MOVLB  5
01EBC:  CLRF   xD9
01EBE:  MOVLW  56
01EC0:  MOVWF  xD8
01EC2:  MOVLW  0A
01EC4:  MOVWF  xDA
01EC6:  MOVLB  0
01EC8:  RCALL  1C2E
....................       APRS_TO_MBOSS_ARRAY[0] = 0xE0;
01ECA:  MOVLW  E0
01ECC:  MOVWF  56
....................       APRS_TO_MBOSS_ARRAY[1] = 0xEE;
01ECE:  MOVLW  EE
01ED0:  MOVWF  57
....................       APRS_TO_MBOSS_ARRAY[2] = 0x1E;
01ED2:  MOVLW  1E
01ED4:  MOVWF  58
....................       APRS_TO_MBOSS_ARRAY[3] = 0xA1;
01ED6:  MOVLW  A1
01ED8:  MOVWF  59
....................       APRS_TO_MBOSS_ARRAY[8] = 0xED;
01EDA:  MOVLW  ED
01EDC:  MOVWF  5E
....................       for(int i = 0; i<9; i++) fputc(APRS_TO_MBOSS_ARRAY[i], mboss);
01EDE:  MOVLB  5
01EE0:  CLRF   xD7
01EE2:  MOVF   xD7,W
01EE4:  SUBLW  08
01EE6:  BNC   1F04
01EE8:  CLRF   03
01EEA:  MOVF   xD7,W
01EEC:  ADDLW  56
01EEE:  MOVWF  FE9
01EF0:  MOVLW  00
01EF2:  ADDWFC 03,W
01EF4:  MOVWF  FEA
01EF6:  MOVFF  FEF,5E5
01EFA:  MOVLB  0
01EFC:  RCALL  1C4E
01EFE:  MOVLB  5
01F00:  INCF   xD7,F
01F02:  BRA    1EE2
....................       
....................       fprintf(debug, "Store and forward on command_Exicuted\n\r ");
01F04:  MOVLW  22
01F06:  MOVWF  FF6
01F08:  MOVLW  06
01F0A:  MOVWF  FF7
01F0C:  MOVLW  00
01F0E:  MOVWF  FF8
01F10:  MOVLB  0
01F12:  CALL   0A64
....................    }
01F16:  GOTO   27C0 (RETURN)
.................... }
.................... 
.................... 
.................... //************************ DATA Transfer In SNF MODE ***************************
.................... //
.................... //*****************************************************************************
.................... 
.................... 
.................... Void DATA_TRANSFER_IN_SNF_MODE()
.................... {
....................    if( MBOSS_TO_APRS_ARRAY[1] == 0x11)
*
020E2:  MOVF   25,W
020E4:  SUBLW  11
020E6:  BTFSS  FD8.2
020E8:  BRA    22C8
....................    {
....................       fprintf(debug, "DATA_TRANSFER_IN_SNF_MODE\n\r ");
020EA:  MOVLW  4C
020EC:  MOVWF  FF6
020EE:  MOVLW  06
020F0:  MOVWF  FF7
020F2:  MOVLW  00
020F4:  MOVWF  FF8
020F6:  CALL   0A64
....................       
....................       unsigned int32 Nofpackets = (unsigned int32)MBOSS_TO_APRS_ARRAY[2];
....................       
....................       unsigned int32 ADD = make32(0,0,MBOSS_TO_APRS_ARRAY[5],MBOSS_TO_APRS_ARRAY[6]);
020FA:  MOVLB  5
020FC:  CLRF   xD7
020FE:  CLRF   xD6
02100:  CLRF   xD5
02102:  MOVFF  26,5D4
02106:  CLRF   xDB
02108:  CLRF   xDA
0210A:  MOVFF  29,5D9
0210E:  MOVFF  2A,5D8
....................       
....................       for(unsigned int32 i = 0; i< Nofpackets; i++)
02112:  CLRF   xDF
02114:  CLRF   xDE
02116:  CLRF   xDD
02118:  CLRF   xDC
0211A:  MOVF   xDF,W
0211C:  SUBWF  xD7,W
0211E:  BTFSS  FD8.0
02120:  BRA    22C8
02122:  BNZ   2140
02124:  MOVF   xDE,W
02126:  SUBWF  xD6,W
02128:  BTFSS  FD8.0
0212A:  BRA    22C8
0212C:  BNZ   2140
0212E:  MOVF   xDD,W
02130:  SUBWF  xD5,W
02132:  BTFSS  FD8.0
02134:  BRA    22C8
02136:  BNZ   2140
02138:  MOVF   xD4,W
0213A:  SUBWF  xDC,W
0213C:  BTFSC  FD8.0
0213E:  BRA    22C8
....................       {  
....................          Delay_ms(50);
02140:  MOVLW  32
02142:  MOVLB  6
02144:  MOVWF  x01
02146:  MOVLB  0
02148:  CALL   087E
....................          for(unsigned int32 j = 0; j<100; j++)
0214C:  MOVLB  5
0214E:  CLRF   xE3
02150:  CLRF   xE2
02152:  CLRF   xE1
02154:  CLRF   xE0
02156:  MOVF   xE3,F
02158:  BTFSS  FD8.2
0215A:  BRA    226E
0215C:  MOVF   xE2,F
0215E:  BTFSS  FD8.2
02160:  BRA    226E
02162:  MOVF   xE1,F
02164:  BTFSS  FD8.2
02166:  BRA    226E
02168:  MOVF   xE0,W
0216A:  SUBLW  63
0216C:  BTFSS  FD8.0
0216E:  BRA    226E
....................          {
....................             APRS_TO_MBOSS_ARRAY[j] = BYTE_READ(SNF_LOCATION + ADD + j + 100*i);
02170:  MOVLW  56
02172:  ADDWF  xE0,W
02174:  MOVWF  01
02176:  MOVLW  00
02178:  ADDWFC xE1,W
0217A:  MOVWF  03
0217C:  MOVFF  01,5E4
02180:  MOVWF  xE5
02182:  MOVF   xD8,W
02184:  MOVLB  2
02186:  ADDWF  xAF,W
02188:  MOVLB  5
0218A:  MOVWF  xE6
0218C:  MOVF   xD9,W
0218E:  MOVLB  2
02190:  ADDWFC xB0,W
02192:  MOVLB  5
02194:  MOVWF  xE7
02196:  MOVF   xDA,W
02198:  MOVLB  2
0219A:  ADDWFC xB1,W
0219C:  MOVLB  5
0219E:  MOVWF  xE8
021A0:  MOVF   xDB,W
021A2:  MOVLB  2
021A4:  ADDWFC xB2,W
021A6:  MOVLB  5
021A8:  MOVWF  xE9
021AA:  MOVF   xE0,W
021AC:  ADDWF  xE6,F
021AE:  MOVF   xE1,W
021B0:  ADDWFC xE7,F
021B2:  MOVF   xE2,W
021B4:  ADDWFC xE8,F
021B6:  MOVF   xE3,W
021B8:  ADDWFC xE9,F
021BA:  MOVFF  FEA,5EB
021BE:  MOVFF  FE9,5EA
021C2:  CLRF   xEF
021C4:  CLRF   xEE
021C6:  CLRF   xED
021C8:  MOVLW  64
021CA:  MOVWF  xEC
021CC:  MOVFF  5DF,5F3
021D0:  MOVFF  5DE,5F2
021D4:  MOVFF  5DD,5F1
021D8:  MOVFF  5DC,5F0
021DC:  MOVLB  0
021DE:  RCALL  1F1A
021E0:  MOVFF  5EB,FEA
021E4:  MOVFF  5EA,FE9
021E8:  MOVF   00,W
021EA:  MOVLB  5
021EC:  ADDWF  xE6,F
021EE:  MOVF   01,W
021F0:  ADDWFC xE7,F
021F2:  MOVF   02,W
021F4:  ADDWFC xE8,F
021F6:  MOVF   03,W
021F8:  ADDWFC xE9,F
021FA:  MOVFF  5E9,5FF
021FE:  MOVFF  5E8,5FE
02202:  MOVFF  5E7,5FD
02206:  MOVFF  5E6,5FC
0220A:  MOVLB  0
0220C:  CALL   07B2
02210:  MOVFF  5E5,FEA
02214:  MOVFF  5E4,FE9
02218:  MOVFF  01,FEF
....................             
....................             fputc(APRS_TO_MBOSS_ARRAY[j], mboss);
0221C:  MOVLW  56
0221E:  MOVLB  5
02220:  ADDWF  xE0,W
02222:  MOVWF  FE9
02224:  MOVLW  00
02226:  ADDWFC xE1,W
02228:  MOVWF  FEA
0222A:  MOVFF  FEF,5E5
0222E:  MOVLB  0
02230:  RCALL  1C4E
....................             fprintf(debug,"%X",APRS_TO_MBOSS_ARRAY[j]);
02232:  MOVLW  56
02234:  MOVLB  5
02236:  ADDWF  xE0,W
02238:  MOVWF  FE9
0223A:  MOVLW  00
0223C:  ADDWFC xE1,W
0223E:  MOVWF  FEA
02240:  MOVFF  FEF,5F6
02244:  MOVLW  37
02246:  MOVWF  xF7
02248:  MOVLB  0
0224A:  CALL   0C10
....................             delay_ms(1);
0224E:  MOVLW  01
02250:  MOVLB  6
02252:  MOVWF  x01
02254:  MOVLB  0
02256:  CALL   087E
0225A:  MOVLW  01
0225C:  MOVLB  5
0225E:  ADDWF  xE0,F
02260:  BTFSC  FD8.0
02262:  INCF   xE1,F
02264:  BTFSC  FD8.2
02266:  INCF   xE2,F
02268:  BTFSC  FD8.2
0226A:  INCF   xE3,F
0226C:  BRA    2156
....................          }  
....................          fprintf(debug, "Packet number = %Lu\n\r ", i);
0226E:  MOVLW  6A
02270:  MOVWF  FF6
02272:  MOVLW  06
02274:  MOVWF  FF7
02276:  MOVLW  00
02278:  MOVWF  FF8
0227A:  MOVLW  10
0227C:  MOVWF  xF5
0227E:  MOVLB  0
02280:  CALL   0BE0
02284:  MOVLW  41
02286:  MOVWF  FE9
02288:  MOVFF  5DF,5F8
0228C:  MOVFF  5DE,5F7
02290:  MOVFF  5DD,5F6
02294:  MOVFF  5DC,5F5
02298:  CALL   0FA2
0229C:  MOVLW  7D
0229E:  MOVWF  FF6
022A0:  MOVLW  06
022A2:  MOVWF  FF7
022A4:  MOVLW  00
022A6:  MOVWF  FF8
022A8:  MOVLW  03
022AA:  MOVLB  5
022AC:  MOVWF  xF5
022AE:  MOVLB  0
022B0:  CALL   0BE0
022B4:  MOVLW  01
022B6:  MOVLB  5
022B8:  ADDWF  xDC,F
022BA:  BTFSC  FD8.0
022BC:  INCF   xDD,F
022BE:  BTFSC  FD8.2
022C0:  INCF   xDE,F
022C2:  BTFSC  FD8.2
022C4:  INCF   xDF,F
022C6:  BRA    211A
022C8:  MOVLB  0
....................       }
....................    }
022CA:  GOTO   27C6 (RETURN)
.................... }
.................... 
.................... //************************ DATA Transfer In DP MODE ***************************
.................... //
.................... //*****************************************************************************
.................... 
.................... 
.................... Void DATA_TRANSFER_IN_DP_MODE()
.................... {
....................    if( MBOSS_TO_APRS_ARRAY[1] == 0x01)
*
01F76:  DECFSZ 25,W
01F78:  BRA    20DC
....................    {
....................       fprintf(debug, "DATA_TRANSFER_IN_DP_MODE\n\r ");
01F7A:  MOVLW  82
01F7C:  MOVWF  FF6
01F7E:  MOVLW  06
01F80:  MOVWF  FF7
01F82:  MOVLW  00
01F84:  MOVWF  FF8
01F86:  CALL   0A64
....................       
....................       char Nofpackets = MBOSS_TO_APRS_ARRAY[2];
....................       
....................       unsigned int32 ADD = make32(0,0,MBOSS_TO_APRS_ARRAY[5],MBOSS_TO_APRS_ARRAY[6]);
01F8A:  MOVFF  26,5D4
01F8E:  MOVLB  5
01F90:  CLRF   xD8
01F92:  CLRF   xD7
01F94:  MOVFF  29,5D6
01F98:  MOVFF  2A,5D5
....................       
....................       for(unsigned int32 i = 0; i< Nofpackets; i++)
01F9C:  CLRF   xDC
01F9E:  CLRF   xDB
01FA0:  CLRF   xDA
01FA2:  CLRF   xD9
01FA4:  MOVF   xDC,F
01FA6:  BTFSS  FD8.2
01FA8:  BRA    20DC
01FAA:  MOVF   xDB,F
01FAC:  BTFSS  FD8.2
01FAE:  BRA    20DC
01FB0:  MOVF   xDA,F
01FB2:  BTFSS  FD8.2
01FB4:  BRA    20DC
01FB6:  MOVF   xD4,W
01FB8:  SUBWF  xD9,W
01FBA:  BTFSC  FD8.0
01FBC:  BRA    20DC
....................       {  
....................          Delay_ms(50);
01FBE:  MOVLW  32
01FC0:  MOVLB  6
01FC2:  MOVWF  x01
01FC4:  MOVLB  0
01FC6:  CALL   087E
....................          for(unsigned int32 j = 0; j<100; j++)
01FCA:  MOVLB  5
01FCC:  CLRF   xE0
01FCE:  CLRF   xDF
01FD0:  CLRF   xDE
01FD2:  CLRF   xDD
01FD4:  MOVF   xE0,F
01FD6:  BTFSS  FD8.2
01FD8:  BRA    20CA
01FDA:  MOVF   xDF,F
01FDC:  BNZ   20CA
01FDE:  MOVF   xDE,F
01FE0:  BNZ   20CA
01FE2:  MOVF   xDD,W
01FE4:  SUBLW  63
01FE6:  BNC   20CA
....................          {
....................             APRS_TO_MBOSS_ARRAY[j] = BYTE_READ(DGP_LOCATION + ADD + j + 100*i);
01FE8:  MOVLW  56
01FEA:  ADDWF  xDD,W
01FEC:  MOVWF  01
01FEE:  MOVLW  00
01FF0:  ADDWFC xDE,W
01FF2:  MOVWF  03
01FF4:  MOVFF  01,5E1
01FF8:  MOVWF  xE2
01FFA:  MOVF   xD5,W
01FFC:  MOVLB  2
01FFE:  ADDWF  xB3,W
02000:  MOVLB  5
02002:  MOVWF  xE3
02004:  MOVF   xD6,W
02006:  MOVLB  2
02008:  ADDWFC xB4,W
0200A:  MOVLB  5
0200C:  MOVWF  xE4
0200E:  MOVF   xD7,W
02010:  MOVLB  2
02012:  ADDWFC xB5,W
02014:  MOVLB  5
02016:  MOVWF  xE5
02018:  MOVF   xD8,W
0201A:  MOVLB  2
0201C:  ADDWFC xB6,W
0201E:  MOVLB  5
02020:  MOVWF  xE6
02022:  MOVF   xDD,W
02024:  ADDWF  xE3,F
02026:  MOVF   xDE,W
02028:  ADDWFC xE4,F
0202A:  MOVF   xDF,W
0202C:  ADDWFC xE5,F
0202E:  MOVF   xE0,W
02030:  ADDWFC xE6,F
02032:  MOVFF  FEA,5E8
02036:  MOVFF  FE9,5E7
0203A:  CLRF   xEF
0203C:  CLRF   xEE
0203E:  CLRF   xED
02040:  MOVLW  64
02042:  MOVWF  xEC
02044:  MOVFF  5DC,5F3
02048:  MOVFF  5DB,5F2
0204C:  MOVFF  5DA,5F1
02050:  MOVFF  5D9,5F0
02054:  MOVLB  0
02056:  RCALL  1F1A
02058:  MOVFF  5E8,FEA
0205C:  MOVFF  5E7,FE9
02060:  MOVF   00,W
02062:  MOVLB  5
02064:  ADDWF  xE3,F
02066:  MOVF   01,W
02068:  ADDWFC xE4,F
0206A:  MOVF   02,W
0206C:  ADDWFC xE5,F
0206E:  MOVF   03,W
02070:  ADDWFC xE6,F
02072:  MOVFF  5E6,5FF
02076:  MOVFF  5E5,5FE
0207A:  MOVFF  5E4,5FD
0207E:  MOVFF  5E3,5FC
02082:  MOVLB  0
02084:  CALL   07B2
02088:  MOVFF  5E2,FEA
0208C:  MOVFF  5E1,FE9
02090:  MOVFF  01,FEF
....................             
....................             fputc(APRS_TO_MBOSS_ARRAY[j], mboss);
02094:  MOVLW  56
02096:  MOVLB  5
02098:  ADDWF  xDD,W
0209A:  MOVWF  FE9
0209C:  MOVLW  00
0209E:  ADDWFC xDE,W
020A0:  MOVWF  FEA
020A2:  MOVFF  FEF,5E5
020A6:  MOVLB  0
020A8:  RCALL  1C4E
....................             delay_ms(1);
020AA:  MOVLW  01
020AC:  MOVLB  6
020AE:  MOVWF  x01
020B0:  MOVLB  0
020B2:  CALL   087E
020B6:  MOVLW  01
020B8:  MOVLB  5
020BA:  ADDWF  xDD,F
020BC:  BTFSC  FD8.0
020BE:  INCF   xDE,F
020C0:  BTFSC  FD8.2
020C2:  INCF   xDF,F
020C4:  BTFSC  FD8.2
020C6:  INCF   xE0,F
020C8:  BRA    1FD4
....................          }          
020CA:  MOVLW  01
020CC:  ADDWF  xD9,F
020CE:  BTFSC  FD8.0
020D0:  INCF   xDA,F
020D2:  BTFSC  FD8.2
020D4:  INCF   xDB,F
020D6:  BTFSC  FD8.2
020D8:  INCF   xDC,F
020DA:  BRA    1FA4
020DC:  MOVLB  0
....................       }
....................    }
020DE:  GOTO   27C4 (RETURN)
.................... }
.................... 
.................... 
.................... //***************************DATA Transfer IN S&F MODE*************************
.................... //
.................... //*****************************************************************************
.................... 
.................... 
.................... //!Void DATA_TRANSFER_IN_SNF_MODE()
.................... //!{
.................... //!   if( MBOSS_TO_APRS_ARRAY[1]== 0x11)
.................... //!   {
.................... //!      fprintf(debug, "DATA_TRANSFER_IN_SNF_MODE\n\r ");
.................... //!      
.................... //!      unsigned int Nofpackets = make16(MBOSS_TO_APRS_ARRAY[6],MBOSS_TO_APRS_ARRAY[7]);
.................... //!      
.................... //!      for(unsigned int32 i = 0; i< Nofpackets; i++)
.................... //!      {
.................... //!         APRS_TO_MBOSS_ARRAY[0] = 0xE0;
.................... //!         APRS_TO_MBOSS_ARRAY[1] = 0x01;
.................... //!         APRS_TO_MBOSS_ARRAY[2] = (unsigned int8)(i+1) ;
.................... //!         
.................... //!         for(unsigned int32 j = 0; j<81; j++)
.................... //!         {
.................... //!            APRS_TO_MBOSS_ARRAY[3+j] = BYTE_READ(SNF_LOCATION + j + 81*i);
.................... //!         }
.................... //!         APRS_TO_MBOSS_ARRAY[84] = 0xED ;
.................... //!         
.................... //!         for(int i=0; i<=84; i++) fputc(APRS_TO_MBOSS_ARRAY[i], mboss);
.................... //!         
.................... //!         Delay_ms(250);
.................... //!      }
.................... //!   }
.................... //!}
.................... 
.................... //********************************** Beacon ON ********************************
.................... //
.................... //*****************************************************************************
.................... void Beacon_ON(int16 t=1000)
.................... {
....................    if (MBOSS_TO_APRS_ARRAY[2]== 0x33)
*
02416:  MOVF   26,W
02418:  SUBLW  33
0241A:  BNZ   24F0
....................    {
....................       // Ack to mboss
....................       CLEAR_DATA_ARRAY(APRS_TO_MBOSS_ARRAY,10);
0241C:  MOVLB  5
0241E:  CLRF   xD9
02420:  MOVLW  56
02422:  MOVWF  xD8
02424:  MOVLW  0A
02426:  MOVWF  xDA
02428:  MOVLB  0
0242A:  RCALL  1C2E
....................       APRS_TO_MBOSS_ARRAY[0] = 0xE0;
0242C:  MOVLW  E0
0242E:  MOVWF  56
....................       APRS_TO_MBOSS_ARRAY[1] = 0x33;
02430:  MOVLW  33
02432:  MOVWF  57
....................       APRS_TO_MBOSS_ARRAY[2] = 0xA0;
02434:  MOVLW  A0
02436:  MOVWF  58
....................       APRS_TO_MBOSS_ARRAY[8] = 0xED;
02438:  MOVLW  ED
0243A:  MOVWF  5E
....................       for(int i = 0; i<9; i++) fputc(APRS_TO_MBOSS_ARRAY[i], mboss);
0243C:  MOVLB  5
0243E:  CLRF   xD6
02440:  MOVF   xD6,W
02442:  SUBLW  08
02444:  BNC   2464
02446:  CLRF   03
02448:  MOVF   xD6,W
0244A:  ADDLW  56
0244C:  MOVWF  FE9
0244E:  MOVLW  00
02450:  ADDWFC 03,W
02452:  MOVWF  FEA
02454:  MOVFF  FEF,5E5
02458:  MOVLB  0
0245A:  CALL   1C4E
0245E:  MOVLB  5
02460:  INCF   xD6,F
02462:  BRA    2440
....................       
....................       fprintf(debug, "Beacon_ON command\n\r ");
02464:  MOVLW  9E
02466:  MOVWF  FF6
02468:  MOVLW  06
0246A:  MOVWF  FF7
0246C:  MOVLW  00
0246E:  MOVWF  FF8
02470:  MOVLB  0
02472:  CALL   0A64
....................       Delay_ms(4000);
02476:  MOVLW  10
02478:  MOVLB  5
0247A:  MOVWF  xD8
0247C:  MOVLW  FA
0247E:  MOVLB  6
02480:  MOVWF  x01
02482:  MOVLB  0
02484:  CALL   087E
02488:  MOVLB  5
0248A:  DECFSZ xD8,F
0248C:  BRA    247C
....................       
....................       Mode_Flag = 0x33;   
0248E:  MOVLW  33
02490:  MOVLB  2
02492:  MOVWF  xAE
....................       
....................       CLEAR_DATA_ARRAY(APRS_TO_MBOSS_ARRAY,10);
02494:  MOVLB  5
02496:  CLRF   xD9
02498:  MOVLW  56
0249A:  MOVWF  xD8
0249C:  MOVLW  0A
0249E:  MOVWF  xDA
024A0:  MOVLB  0
024A2:  CALL   1C2E
....................       APRS_TO_MBOSS_ARRAY[0] = 0xE0;
024A6:  MOVLW  E0
024A8:  MOVWF  56
....................       APRS_TO_MBOSS_ARRAY[1] = 0x33;
024AA:  MOVLW  33
024AC:  MOVWF  57
....................       APRS_TO_MBOSS_ARRAY[2] = 0xA1;
024AE:  MOVLW  A1
024B0:  MOVWF  58
....................       APRS_TO_MBOSS_ARRAY[8] = 0xED;
024B2:  MOVLW  ED
024B4:  MOVWF  5E
....................       for(int i = 0; i<9; i++) fputc(APRS_TO_MBOSS_ARRAY[i], mboss);
024B6:  MOVLB  5
024B8:  CLRF   xD7
024BA:  MOVF   xD7,W
024BC:  SUBLW  08
024BE:  BNC   24DE
024C0:  CLRF   03
024C2:  MOVF   xD7,W
024C4:  ADDLW  56
024C6:  MOVWF  FE9
024C8:  MOVLW  00
024CA:  ADDWFC 03,W
024CC:  MOVWF  FEA
024CE:  MOVFF  FEF,5E5
024D2:  MOVLB  0
024D4:  CALL   1C4E
024D8:  MOVLB  5
024DA:  INCF   xD7,F
024DC:  BRA    24BA
....................       
....................        fprintf(debug, "Beacon_ON command_ Exicuted\n\r ");
024DE:  MOVLW  B4
024E0:  MOVWF  FF6
024E2:  MOVLW  06
024E4:  MOVWF  FF7
024E6:  MOVLW  00
024E8:  MOVWF  FF8
024EA:  MOVLB  0
024EC:  CALL   0A64
....................    }
024F0:  GOTO   27D6 (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... 
.................... //********************************** Beacon OFF *******************************
.................... //
.................... //*****************************************************************************
.................... void Beacon_OFF(int16 t=1000)
.................... {
....................    if (MBOSS_TO_APRS_ARRAY[2]== 0x88)
024F4:  MOVF   26,W
024F6:  SUBLW  88
024F8:  BNZ   25D0
....................    {
....................       // Ack to mboss
....................       CLEAR_DATA_ARRAY(APRS_TO_MBOSS_ARRAY,10);
024FA:  MOVLB  5
024FC:  CLRF   xD9
024FE:  MOVLW  56
02500:  MOVWF  xD8
02502:  MOVLW  0A
02504:  MOVWF  xDA
02506:  MOVLB  0
02508:  CALL   1C2E
....................       APRS_TO_MBOSS_ARRAY[0] = 0xE0;
0250C:  MOVLW  E0
0250E:  MOVWF  56
....................       APRS_TO_MBOSS_ARRAY[1] = 0x88;
02510:  MOVLW  88
02512:  MOVWF  57
....................       APRS_TO_MBOSS_ARRAY[2] = 0xA0;
02514:  MOVLW  A0
02516:  MOVWF  58
....................       APRS_TO_MBOSS_ARRAY[8] = 0xED;
02518:  MOVLW  ED
0251A:  MOVWF  5E
....................       for(int i = 0; i<9; i++) fputc(APRS_TO_MBOSS_ARRAY[i], mboss);
0251C:  MOVLB  5
0251E:  CLRF   xD6
02520:  MOVF   xD6,W
02522:  SUBLW  08
02524:  BNC   2544
02526:  CLRF   03
02528:  MOVF   xD6,W
0252A:  ADDLW  56
0252C:  MOVWF  FE9
0252E:  MOVLW  00
02530:  ADDWFC 03,W
02532:  MOVWF  FEA
02534:  MOVFF  FEF,5E5
02538:  MOVLB  0
0253A:  CALL   1C4E
0253E:  MOVLB  5
02540:  INCF   xD6,F
02542:  BRA    2520
....................       
....................       fprintf(debug, "Beacon_OFF command\n\r ");
02544:  MOVLW  D4
02546:  MOVWF  FF6
02548:  MOVLW  06
0254A:  MOVWF  FF7
0254C:  MOVLW  00
0254E:  MOVWF  FF8
02550:  MOVLB  0
02552:  CALL   0A64
....................       Delay_ms(4000);
02556:  MOVLW  10
02558:  MOVLB  5
0255A:  MOVWF  xD8
0255C:  MOVLW  FA
0255E:  MOVLB  6
02560:  MOVWF  x01
02562:  MOVLB  0
02564:  CALL   087E
02568:  MOVLB  5
0256A:  DECFSZ xD8,F
0256C:  BRA    255C
....................       Mode_Flag = 0x88;   
0256E:  MOVLW  88
02570:  MOVLB  2
02572:  MOVWF  xAE
....................       
....................       CLEAR_DATA_ARRAY(APRS_TO_MBOSS_ARRAY,10);
02574:  MOVLB  5
02576:  CLRF   xD9
02578:  MOVLW  56
0257A:  MOVWF  xD8
0257C:  MOVLW  0A
0257E:  MOVWF  xDA
02580:  MOVLB  0
02582:  CALL   1C2E
....................       APRS_TO_MBOSS_ARRAY[0] = 0xE0;
02586:  MOVLW  E0
02588:  MOVWF  56
....................       APRS_TO_MBOSS_ARRAY[1] = 0x88;
0258A:  MOVLW  88
0258C:  MOVWF  57
....................       APRS_TO_MBOSS_ARRAY[2] = 0xA1;
0258E:  MOVLW  A1
02590:  MOVWF  58
....................       APRS_TO_MBOSS_ARRAY[8] = 0xED;
02592:  MOVLW  ED
02594:  MOVWF  5E
....................       for(int i = 0; i<9; i++) fputc(APRS_TO_MBOSS_ARRAY[i], mboss);
02596:  MOVLB  5
02598:  CLRF   xD7
0259A:  MOVF   xD7,W
0259C:  SUBLW  08
0259E:  BNC   25BE
025A0:  CLRF   03
025A2:  MOVF   xD7,W
025A4:  ADDLW  56
025A6:  MOVWF  FE9
025A8:  MOVLW  00
025AA:  ADDWFC 03,W
025AC:  MOVWF  FEA
025AE:  MOVFF  FEF,5E5
025B2:  MOVLB  0
025B4:  CALL   1C4E
025B8:  MOVLB  5
025BA:  INCF   xD7,F
025BC:  BRA    259A
....................       
....................        fprintf(debug, "Beacon_OFF command_ Exicuted\n\r ");
025BE:  MOVLW  EA
025C0:  MOVWF  FF6
025C2:  MOVLW  06
025C4:  MOVWF  FF7
025C6:  MOVLW  00
025C8:  MOVWF  FF8
025CA:  MOVLB  0
025CC:  CALL   0A64
....................    }
025D0:  GOTO   27E4 (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... 
.................... 
.................... //****************************Data Sector Erase********************************
.................... //
.................... //*****************************************************************************
.................... 
.................... Void DATA_SECTORS_ERASE()
.................... {
....................    if( MBOSS_TO_APRS_ARRAY[2]== 0x69)
*
022CE:  MOVF   26,W
022D0:  SUBLW  69
022D2:  BTFSS  FD8.2
022D4:  BRA    2412
....................    {
....................   //     Ack to mboss
....................       CLEAR_DATA_ARRAY(APRS_TO_MBOSS_ARRAY,10);
022D6:  MOVLB  5
022D8:  CLRF   xD9
022DA:  MOVLW  56
022DC:  MOVWF  xD8
022DE:  MOVLW  0A
022E0:  MOVWF  xDA
022E2:  MOVLB  0
022E4:  RCALL  1C2E
....................       APRS_TO_MBOSS_ARRAY[0] = 0xE0;
022E6:  MOVLW  E0
022E8:  MOVWF  56
....................       APRS_TO_MBOSS_ARRAY[1] = 0x69;
022EA:  MOVLW  69
022EC:  MOVWF  57
....................       APRS_TO_MBOSS_ARRAY[2] = 0xA0;
022EE:  MOVLW  A0
022F0:  MOVWF  58
....................       APRS_TO_MBOSS_ARRAY[8] = 0xED;
022F2:  MOVLW  ED
022F4:  MOVWF  5E
....................       for(int i = 0; i<9; i++) fputc(APRS_TO_MBOSS_ARRAY[i], mboss);
022F6:  MOVLB  5
022F8:  CLRF   xD4
022FA:  MOVF   xD4,W
022FC:  SUBLW  08
022FE:  BNC   231C
02300:  CLRF   03
02302:  MOVF   xD4,W
02304:  ADDLW  56
02306:  MOVWF  FE9
02308:  MOVLW  00
0230A:  ADDWFC 03,W
0230C:  MOVWF  FEA
0230E:  MOVFF  FEF,5E5
02312:  MOVLB  0
02314:  RCALL  1C4E
02316:  MOVLB  5
02318:  INCF   xD4,F
0231A:  BRA    22FA
....................       
....................  //     fprintf(debug, "DATA_SECTORS_ERASE\n\r ");
....................       
....................       SECTOR_ERASE(SNF_LOCATION,64, 1500);
0231C:  MOVFF  2B2,5F8
02320:  MOVFF  2B1,5F7
02324:  MOVFF  2B0,5F6
02328:  MOVFF  2AF,5F5
0232C:  MOVLW  40
0232E:  MOVWF  xF9
02330:  MOVLW  05
02332:  MOVWF  xFB
02334:  MOVLW  DC
02336:  MOVWF  xFA
02338:  MOVLB  0
0233A:  CALL   08A8
....................       SECTOR_ERASE(DGP_LOCATION,64, 1500);
0233E:  MOVFF  2B6,5F8
02342:  MOVFF  2B5,5F7
02346:  MOVFF  2B4,5F6
0234A:  MOVFF  2B3,5F5
0234E:  MOVLW  40
02350:  MOVLB  5
02352:  MOVWF  xF9
02354:  MOVLW  05
02356:  MOVWF  xFB
02358:  MOVLW  DC
0235A:  MOVWF  xFA
0235C:  MOVLB  0
0235E:  CALL   08A8
....................       SECTOR_ERASE(NEXT_B_ADD_DP,64, 1500);
02362:  MOVFF  1F,5F8
02366:  MOVFF  1E,5F7
0236A:  MOVFF  1D,5F6
0236E:  MOVFF  1C,5F5
02372:  MOVLW  40
02374:  MOVLB  5
02376:  MOVWF  xF9
02378:  MOVLW  05
0237A:  MOVWF  xFB
0237C:  MOVLW  DC
0237E:  MOVWF  xFA
02380:  MOVLB  0
02382:  CALL   08A8
....................       SECTOR_ERASE(NEXT_B_ADD_SF,64, 1500);
02386:  MOVFF  23,5F8
0238A:  MOVFF  22,5F7
0238E:  MOVFF  21,5F6
02392:  MOVFF  20,5F5
02396:  MOVLW  40
02398:  MOVLB  5
0239A:  MOVWF  xF9
0239C:  MOVLW  05
0239E:  MOVWF  xFB
023A0:  MOVLW  DC
023A2:  MOVWF  xFA
023A4:  MOVLB  0
023A6:  CALL   08A8
....................       fprintf(debug, "Sectors erased\n\r ");
023AA:  MOVLW  0A
023AC:  MOVWF  FF6
023AE:  MOVLW  07
023B0:  MOVWF  FF7
023B2:  MOVLW  00
023B4:  MOVWF  FF8
023B6:  CALL   0A64
....................       
....................       
....................       CLEAR_DATA_ARRAY(APRS_TO_MBOSS_ARRAY,10);
023BA:  MOVLB  5
023BC:  CLRF   xD9
023BE:  MOVLW  56
023C0:  MOVWF  xD8
023C2:  MOVLW  0A
023C4:  MOVWF  xDA
023C6:  MOVLB  0
023C8:  RCALL  1C2E
....................       APRS_TO_MBOSS_ARRAY[0] = 0xE0;
023CA:  MOVLW  E0
023CC:  MOVWF  56
....................       APRS_TO_MBOSS_ARRAY[1] = 0x69;
023CE:  MOVLW  69
023D0:  MOVWF  57
....................       APRS_TO_MBOSS_ARRAY[2] = 0xA1;
023D2:  MOVLW  A1
023D4:  MOVWF  58
....................       APRS_TO_MBOSS_ARRAY[8] = 0xED;
023D6:  MOVLW  ED
023D8:  MOVWF  5E
....................       for(int i = 0; i<9; i++) fputc(APRS_TO_MBOSS_ARRAY[i], mboss);
023DA:  MOVLB  5
023DC:  CLRF   xD5
023DE:  MOVF   xD5,W
023E0:  SUBLW  08
023E2:  BNC   2400
023E4:  CLRF   03
023E6:  MOVF   xD5,W
023E8:  ADDLW  56
023EA:  MOVWF  FE9
023EC:  MOVLW  00
023EE:  ADDWFC 03,W
023F0:  MOVWF  FEA
023F2:  MOVFF  FEF,5E5
023F6:  MOVLB  0
023F8:  RCALL  1C4E
023FA:  MOVLB  5
023FC:  INCF   xD5,F
023FE:  BRA    23DE
....................       
....................        fprintf(debug, "Data_Secters_Erase_ Exicuted\n\r ");
02400:  MOVLW  1C
02402:  MOVWF  FF6
02404:  MOVLW  07
02406:  MOVWF  FF7
02408:  MOVLW  00
0240A:  MOVWF  FF8
0240C:  MOVLB  0
0240E:  CALL   0A64
....................    }
02412:  GOTO   27C8 (RETURN)
.................... }
.................... //*****************************************************************************
.................... // *************************** Manual Setting *********************************
.................... //*****************************************************************************
.................... 
.................... 
.................... void Manual_Settings()
.................... {
....................    fprintf(debug, "command -->> ");
....................    for(int i = 0; i<UART2_Byte_Counter; i++)
....................    {
....................       fputc(UART2_Buffer[i], debug);
....................    }
....................    
....................    
....................       fputc(0x0A, debug); // 0x0A Represent Enter in ACII or  \n
....................       fputc(0x0D, debug); // 0x0D Represent Carriage Return in Ascii or  \r
....................       
....................       
....................    for(int i = 0; i<UART2_Byte_Counter-1; i++)
....................    {
....................       fputc(UART2_Buffer[i], TNC);
....................       UART2_Buffer[i] = 0;
....................    }
....................    fputc(0x0A, TNC);
....................    
....................    UART2_Byte_Counter = 0;
....................    uartflag = 0 ;
.................... }
.................... 
.................... 
.................... #include <Mode_Selection.c>
.................... 
.................... 
.................... 
.................... //********************************* Basic Setting ********************************
.................... //
.................... //********************************************************************************
.................... char C_6;
.................... 
.................... void Setting()
.................... {
....................    C_6 = input(PIN_C6);
....................    
*
0099C:  BSF    F94.6
0099E:  MOVLB  5
009A0:  CLRF   xD2
009A2:  BTFSC  F82.6
009A4:  INCF   xD2,F
....................    enable_interrupts(int_rda);
....................    enable_interrupts(int_rda2);
009A6:  BSF    F9D.5
....................    enable_interrupts(GLOBAL);
009A8:  BSF    FA3.5
....................    //delay_ms(3000);
009AA:  MOVLW  C0
009AC:  IORWF  FF2,F
....................    
....................    //TRYING_TO_PUT_DIGIPETER_TO_MONITOR_MODE(2);
....................    //boot_Kiss_Mode(1000);
....................    // TNC_Settings(2000)
....................    
....................    if( BYTE_READ(0x000AFFFF) != 0xFF ) SECTOR_ERASE(SNF_LOCATION,64);
....................    if( BYTE_READ(0x000BFFFF) != 0xFF ) SECTOR_ERASE(DGP_LOCATION,64);
009AE:  CLRF   xFF
009B0:  MOVLW  0A
009B2:  MOVWF  xFE
009B4:  SETF   xFD
009B6:  SETF   xFC
009B8:  MOVLB  0
009BA:  RCALL  07B2
009BC:  INCFSZ 01,W
009BE:  BRA    09C2
009C0:  BRA    09E4
009C2:  MOVFF  2B2,5F8
009C6:  MOVFF  2B1,5F7
009CA:  MOVFF  2B0,5F6
009CE:  MOVFF  2AF,5F5
009D2:  MOVLW  40
009D4:  MOVLB  5
009D6:  MOVWF  xF9
009D8:  MOVLW  03
009DA:  MOVWF  xFB
009DC:  MOVLW  E8
009DE:  MOVWF  xFA
009E0:  MOVLB  0
009E2:  RCALL  08A8
.................... }
009E4:  MOVLB  5
009E6:  CLRF   xFF
009E8:  MOVLW  0B
009EA:  MOVWF  xFE
009EC:  SETF   xFD
009EE:  SETF   xFC
009F0:  MOVLB  0
009F2:  RCALL  07B2
009F4:  INCFSZ 01,W
009F6:  BRA    09FA
009F8:  BRA    0A1C
009FA:  MOVFF  2B6,5F8
009FE:  MOVFF  2B5,5F7
00A02:  MOVFF  2B4,5F6
00A06:  MOVFF  2B3,5F5
00A0A:  MOVLW  40
00A0C:  MOVLB  5
00A0E:  MOVWF  xF9
00A10:  MOVLW  03
00A12:  MOVWF  xFB
00A14:  MOVLW  E8
00A16:  MOVWF  xFA
00A18:  MOVLB  0
00A1A:  RCALL  08A8
00A1C:  GOTO   26CE (RETURN)
.................... 
.................... 
.................... 
.................... void main()
.................... {
*
025D4:  CLRF   FF8
025D6:  BCF    FD0.7
025D8:  BSF    07.7
025DA:  MOVLB  E
025DC:  MOVLW  55
025DE:  MOVWF  F7E
025E0:  MOVLW  AA
025E2:  MOVWF  F7E
025E4:  BCF    F66.6
025E6:  MOVLW  F4
025E8:  MOVWF  x2A
025EA:  MOVLW  01
025EC:  MOVWF  x19
025EE:  MOVLW  55
025F0:  MOVWF  F7E
025F2:  MOVLW  AA
025F4:  MOVWF  F7E
025F6:  BSF    F66.6
025F8:  CLRF   F9B
025FA:  CLRF   F64
025FC:  MOVLW  01
025FE:  MOVWF  F65
02600:  CLRF   F66
02602:  MOVWF  FD3
02604:  BCF    F96.1
02606:  BSF    F8D.1
02608:  MOVLW  CC
0260A:  MOVWF  1B
0260C:  CLRF   1F
0260E:  MOVLW  02
02610:  MOVWF  1E
02612:  CLRF   1D
02614:  CLRF   1C
02616:  CLRF   23
02618:  MOVLW  03
0261A:  MOVWF  22
0261C:  CLRF   21
0261E:  CLRF   20
02620:  MOVLW  0E
02622:  MOVLB  2
02624:  MOVWF  xAE
02626:  CLRF   xB2
02628:  MOVLW  1A
0262A:  MOVWF  xB1
0262C:  CLRF   xB0
0262E:  CLRF   xAF
02630:  CLRF   xB6
02632:  MOVLW  1B
02634:  MOVWF  xB5
02636:  CLRF   xB4
02638:  CLRF   xB3
0263A:  CLRF   xB7
0263C:  BCF    F67.3
0263E:  MOVLW  0C
02640:  MOVWF  FAF
02642:  MOVLW  A2
02644:  MOVWF  FAC
02646:  MOVLW  90
02648:  MOVWF  FAB
0264A:  MOVLB  3
0264C:  CLRF   x8A
0264E:  CLRF   x8B
02650:  CLRF   x8C
02652:  CLRF   x8D
02654:  MOVLB  5
02656:  CLRF   x83
02658:  CLRF   x82
0265A:  CLRF   x84
0265C:  CLRF   x85
0265E:  CLRF   x86
02660:  BCF    F93.6
02662:  BSF    F8A.6
02664:  CLRF   xBA
02666:  CLRF   xB9
02668:  BSF    F92.1
0266A:  BCF    F92.0
0266C:  BCF    F92.3
0266E:  BCF    F89.3
02670:  CLRF   xBB
02672:  CLRF   xBF
02674:  CLRF   xBE
02676:  CLRF   xBD
02678:  CLRF   xBC
0267A:  CLRF   xC1
0267C:  CLRF   xC0
0267E:  CLRF   xC3
02680:  CLRF   xC2
02682:  CLRF   xC5
02684:  CLRF   xC4
02686:  CLRF   xC7
02688:  CLRF   xC6
0268A:  CLRF   xC9
0268C:  CLRF   xC8
0268E:  CLRF   xCD
02690:  CLRF   xCC
02692:  CLRF   xCB
02694:  CLRF   xCA
02696:  CLRF   xD1
02698:  CLRF   xD0
0269A:  CLRF   xCF
0269C:  CLRF   xCE
0269E:  MOVLB  E
026A0:  CLRF   xD9
026A2:  CLRF   xDA
026A4:  CLRF   xCE
026A6:  CLRF   xCF
026A8:  CLRF   xD0
026AA:  CLRF   xD1
026AC:  CLRF   xD2
026AE:  CLRF   xD3
026B0:  CLRF   xD4
026B2:  CLRF   xD5
026B4:  CLRF   x45
026B6:  CLRF   x46
026B8:  CLRF   x47
026BA:  BCF    x8D.7
026BC:  BCF    x8D.6
026BE:  BCF    x8D.5
026C0:  MOVLB  F
026C2:  CLRF   x53
026C4:  CLRF   x38
026C6:  CLRF   x37
....................    //delay_ms(2000);
....................    Setting();
....................    fprintf(debug, "PIC Booting \n\r"); 
026C8:  MOVLB  0
026CA:  GOTO   099C
....................    
026CE:  MOVLW  4A
026D0:  MOVWF  FF6
026D2:  MOVLW  07
026D4:  MOVWF  FF7
026D6:  MOVLW  00
026D8:  MOVWF  FF8
026DA:  CALL   0A64
....................    while(true)
....................    {  
....................       CHECK_UART_INCOMING_FROM_MBOSS();          // Function wrote in PIC Seeting.c 
....................       TNC_MANUAL_SETTINGS_COMMAND();             // Function wrote in PIC Seeting.c
026DE:  MOVLW  09
026E0:  MOVLB  5
026E2:  MOVWF  xD4
026E4:  MOVLB  0
026E6:  GOTO   0AD6
....................       
026EA:  GOTO   0C5E
....................       if( UF == 0xCC ) CHECK_KISS_FRAME_DATA_AND_SAVE(50000);
....................       
026EE:  MOVF   1B,W
026F0:  SUBLW  CC
026F2:  BNZ   2704
026F4:  MOVLW  C3
026F6:  MOVLB  5
026F8:  MOVWF  xD5
026FA:  MOVLW  50
026FC:  MOVWF  xD4
026FE:  MOVLB  0
02700:  GOTO   110C
....................       if( UF == 0xDD )
....................       {
02704:  MOVF   1B,W
02706:  SUBLW  DD
02708:  BNZ   2724
....................          while( UART1_Available() )
....................          {
0270A:  GOTO   1C22
0270E:  MOVF   01,F
02710:  BZ    2724
....................             fputc(UART1_Read(), debug );
....................          }
02712:  CALL   0ED6
02716:  MOVFF  01,5D4
0271A:  MOVFF  01,601
0271E:  CALL   0A20
02722:  BRA    270A
....................       }
....................       
....................       if( (MBOSS_TO_APRS_ARRAY[0]==0xE0) && (MBOSS_TO_APRS_ARRAY[8]==0xED) ) // Frame Identification 
....................       {  
02724:  MOVF   24,W
02726:  SUBLW  E0
02728:  BNZ   27F6
0272A:  MOVF   2C,W
0272C:  SUBLW  ED
0272E:  BNZ   27F6
....................          //___________________________________________________________
....................          fprintf(debug, "CMD from Mission BOSS --> "); 
....................          for(int i = 0; i<9; i++)
02730:  MOVLW  5A
02732:  MOVWF  FF6
02734:  MOVLW  07
02736:  MOVWF  FF7
02738:  MOVLW  00
0273A:  MOVWF  FF8
0273C:  CALL   0A64
....................          {
02740:  MOVLB  5
02742:  CLRF   xD3
02744:  MOVF   xD3,W
02746:  SUBLW  08
02748:  BNC   2778
....................             fprintf(debug,"%X ", MBOSS_TO_APRS_ARRAY[i]);
....................          }
0274A:  CLRF   03
0274C:  MOVF   xD3,W
0274E:  ADDLW  24
02750:  MOVWF  FE9
02752:  MOVLW  00
02754:  ADDWFC 03,W
02756:  MOVWF  FEA
02758:  MOVFF  FEF,5F6
0275C:  MOVLW  37
0275E:  MOVWF  xF7
02760:  MOVLB  0
02762:  CALL   0C10
02766:  MOVLW  20
02768:  MOVLB  6
0276A:  MOVWF  x01
0276C:  MOVLB  0
0276E:  CALL   0A20
02772:  MOVLB  5
02774:  INCF   xD3,F
02776:  BRA    2744
....................          fprintf(debug, "\n\r" );
....................          //___________________________________________________________
02778:  MOVLW  0A
0277A:  MOVLB  6
0277C:  MOVWF  x01
0277E:  MOVLB  0
02780:  CALL   0A20
02784:  MOVLW  0D
02786:  MOVLB  6
02788:  MOVWF  x01
0278A:  MOVLB  0
0278C:  CALL   0A20
....................            
....................          Digipeter_ON()             ;                     // 0x
....................          Digipeter_OFF()            ;                     // 0x
02790:  MOVLW  03
02792:  MOVLB  5
02794:  MOVWF  xD5
02796:  MOVLW  E8
02798:  MOVWF  xD4
0279A:  MOVLB  0
0279C:  GOTO   1C94
....................          STORE_AND_FORWARD_ON()     ;                     // 0x
027A0:  MOVLW  03
027A2:  MOVLB  5
027A4:  MOVWF  xD5
027A6:  MOVLW  E8
027A8:  MOVWF  xD4
027AA:  MOVLB  0
027AC:  GOTO   1D74
....................          DATA_TRANSFER_IN_DP_MODE() ;                     // 0x
027B0:  MOVLW  07
027B2:  MOVLB  5
027B4:  MOVWF  xD5
027B6:  MOVLW  D0
027B8:  MOVWF  xD4
027BA:  MOVLB  0
027BC:  GOTO   1E3A
....................          DATA_TRANSFER_IN_SNF_MODE();                     // 0x
027C0:  GOTO   1F76
....................          DATA_SECTORS_ERASE()       ;                     // 0x  //
027C4:  BRA    20E2
....................          Beacon_ON()                ;                     // 0x
027C6:  BRA    22CE
....................          Beacon_OFF()               ;                     // 0x
027C8:  MOVLW  03
027CA:  MOVLB  5
027CC:  MOVWF  xD5
027CE:  MOVLW  E8
027D0:  MOVWF  xD4
027D2:  MOVLB  0
027D4:  BRA    2416
....................          
027D6:  MOVLW  03
027D8:  MOVLB  5
027DA:  MOVWF  xD5
027DC:  MOVLW  E8
027DE:  MOVWF  xD4
027E0:  MOVLB  0
027E2:  BRA    24F4
....................          CLEAR_DATA_ARRAY(MBOSS_TO_APRS_ARRAY, 50); 
....................       }      
027E4:  MOVLB  5
027E6:  CLRF   xD9
027E8:  MOVLW  24
027EA:  MOVWF  xD8
027EC:  MOVLW  32
027EE:  MOVWF  xDA
027F0:  MOVLB  0
027F2:  CALL   1C2E
....................    }
027F6:  BRA    26DE
.................... }
.................... 
027F8:  SLEEP 

Configuration Fuses:
   Word  1: F7A0   STVREN NOXINST NODEBUG BROWNOUT_SW BORV18 NOPROTECT
   Word  2: FC81   FRC_PLL SOSC_DIG NOCLOCKOUT IESO PLL4X
   Word  3: F033   NOPR
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS DSWDT_ DSWDT DSWDTOSC_INT
